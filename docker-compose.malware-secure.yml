services:
  # LEVEL 1: Maximum isolation for static analysis
  kali-malware-static:
    build:
      context: .
      dockerfile: docker/malware/Dockerfile.malware-secure
    image: kali-malware-secure:latest
    container_name: kali-malware-static
    hostname: static-analysis
    user: "1000:1000"
    read_only: true
    environment:
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - ./malware/samples:/samples:ro
      - ./malware/reports:/reports:rw
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 500M
      - type: tmpfs
        target: /var/tmp
        tmpfs:
          size: 500M
      - type: tmpfs
        target: /home/kali/.cache
        tmpfs:
          size: 200M
    network_mode: none
    privileged: false
    stdin_open: true
    tty: true
    restart: "no"
    mem_limit: 2g
    mem_reservation: 512m
    cpus: 1
    pids_limit: 200
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID

  # LEVEL 2: Dynamic analysis with limited network
  kali-malware-dynamic:
    build:
      context: .
      dockerfile: docker/malware/Dockerfile.malware-secure
    image: kali-malware-secure:latest
    container_name: kali-malware-dynamic
    hostname: dynamic-analysis
    user: "1000:1000"
    environment:
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - ./malware/samples:/samples:ro
      - ./malware/reports:/reports:rw
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 1G
      - type: tmpfs
        target: /var/tmp
        tmpfs:
          size: 1G
      - type: tmpfs
        target: /home/kali
        tmpfs:
          size: 500M
    networks:
      - malware-isolated-net
    privileged: false
    stdin_open: true
    tty: true
    restart: "no"
    mem_limit: 4g
    mem_reservation: 1g
    cpus: 2
    pids_limit: 500
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_RAW
      - NET_BIND_SERVICE
      - SYS_PTRACE
    dns:
      - 127.0.0.1
    dns_search: []

  # LEVEL 3: Sandbox runner
  kali-malware-sandbox:
    build:
      context: .
      dockerfile: docker/malware/Dockerfile.malware-secure
    image: kali-malware-secure:latest
    container_name: kali-malware-sandbox
    hostname: sandbox
    environment:
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - ./malware/samples:/samples:ro
      - ./malware/sandbox-output:/output:rw
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 2G
      - type: tmpfs
        target: /home
        tmpfs:
          size: 1G
    networks:
      - malware-honeypot-net
    privileged: false
    stdin_open: false
    tty: false
    restart: "no"
    init: true
    mem_limit: 2g
    mem_reservation: 256m
    cpus: 1
    pids_limit: 100
    stop_grace_period: 10s
    stop_signal: SIGKILL
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:default
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    dns:
      - 10.13.37.2
    dns_opt:
      - ndots:0

  # Honeypot/monitoring service
  malware-monitor:
    image: alpine:latest
    container_name: malware-monitor
    hostname: monitor
    command: >
      sh -c "apk add --no-cache tcpdump &&
             tcpdump -i eth0 -w /captures/capture-$$(date +%Y%m%d-%H%M%S).pcap"
    volumes:
      - ./malware/captures:/captures
    networks:
      - malware-honeypot-net
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW
      - NET_ADMIN
    restart: "no"

networks:
  malware-isolated-net:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "false"
    ipam:
      config:
        - subnet: 10.13.37.0/28

  malware-honeypot-net:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "false"
    ipam:
      config:
        - subnet: 10.13.38.0/28