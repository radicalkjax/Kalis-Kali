#!/bin/bash

echo "═══════════════════════════════════════════════════════════════"
echo "        Malware Analysis Environment Setup"
echo "═══════════════════════════════════════════════════════════════"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}[*] Setting up additional malware analysis tools...${NC}"

# Create malware analysis directories
echo -e "${GREEN}[+] Creating malware analysis workspace...${NC}"
mkdir -p ~/malware-analysis/{samples,reports,tools,yara-rules,iocs,sandbox}
mkdir -p ~/malware-analysis/samples/{windows,linux,android,documents,scripts}
mkdir -p ~/malware-analysis/tools/{static,dynamic,network}

# Download YARA rules
echo -e "${GREEN}[+] Downloading YARA rules...${NC}"
cd ~/malware-analysis/yara-rules
git clone https://github.com/Yara-Rules/rules.git yara-rules-repo
git clone https://github.com/Neo23x0/signature-base.git
git clone https://github.com/bartblaze/Yara-rules.git bartblaze-rules
git clone https://github.com/elastic/protections-artifacts.git elastic-rules

# Install additional tools from GitHub
echo -e "${GREEN}[+] Installing additional analysis tools...${NC}"
cd ~/malware-analysis/tools

# Static analysis tools
cd static
git clone https://github.com/ReFirmLabs/binwalk.git
git clone https://github.com/hasherezade/hollows_hunter.git
git clone https://github.com/K-atc/PINdemonium.git
git clone https://github.com/cylance/CyLR.git

# Dynamic analysis tools
cd ../dynamic
git clone https://github.com/kevoreilly/CAPEv2.git
git clone https://github.com/brad-sp/cuckoo-modified.git
git clone https://github.com/drakvuf/drakvuf.git

# Network analysis tools
cd ../network
git clone https://github.com/activecm/rita.git
git clone https://github.com/zeek/zeek.git

# Install PEStudio via Wine (for Windows PE analysis)
echo -e "${GREEN}[+] Setting up Windows analysis tools...${NC}"
cd ~/malware-analysis/tools
wget -q https://www.winitor.com/tools/pestudio/current/pestudio.zip
unzip -q pestudio.zip -d pestudio
rm pestudio.zip

# Install IDA Free (if user wants)
echo -e "${YELLOW}[?] Would you like to download IDA Free? (y/n)${NC}"
read -r response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo -e "${GREEN}[+] Downloading IDA Free...${NC}"
    wget -q https://out7.hex-rays.com/files/idafree82_linux.run -O idafree_linux.run
    chmod +x idafree_linux.run
    echo -e "${YELLOW}[!] Run ./idafree_linux.run to install IDA Free${NC}"
fi

# Setup Python virtual environment for malware analysis
echo -e "${GREEN}[+] Setting up Python virtual environment...${NC}"
cd ~/malware-analysis
python3 -m venv malware-env
source malware-env/bin/activate

# Install additional Python packages
pip install --upgrade pip
pip install \
    pe-tree \
    pcodedmp \
    oledump \
    pdf-parser \
    peepdf \
    yarAnalyzer \
    malwoverview \
    munin \
    virustotal-api \
    hybridanalysis-api \
    pymisp \
    stix2 \
    cybox \
    ioc-finder \
    ioc_writer

deactivate

# Create useful aliases
echo -e "${GREEN}[+] Adding malware analysis aliases...${NC}"
cat >> ~/.zshrc << 'EOL'

# Malware Analysis Aliases
alias mal-env='source ~/malware-analysis/malware-env/bin/activate'
alias pestudio='wine ~/malware-analysis/tools/pestudio/pestudio.exe'
alias strings-all='strings -a'
alias hex='hexdump -C'
alias pe-info='file -b'
alias hash-file='echo "MD5: $(md5sum $1 | cut -d\" \" -f1)\nSHA1: $(sha1sum $1 | cut -d\" \" -f1)\nSHA256: $(sha256sum $1 | cut -d\" \" -f1)"'

# Quick analysis functions
analyze_pe() {
    echo "=== File Information ==="
    file "$1"
    echo -e "\n=== Hashes ==="
    echo "MD5: $(md5sum "$1" | cut -d' ' -f1)"
    echo "SHA256: $(sha256sum "$1" | cut -d' ' -f1)"
    echo -e "\n=== Strings Preview ==="
    strings -a "$1" | head -20
    echo -e "\n=== PE Header Info ==="
    objdump -x "$1" 2>/dev/null | head -50
}

analyze_elf() {
    echo "=== File Information ==="
    file "$1"
    echo -e "\n=== Hashes ==="
    echo "MD5: $(md5sum "$1" | cut -d' ' -f1)"
    echo "SHA256: $(sha256sum "$1" | cut -d' ' -f1)"
    echo -e "\n=== ELF Header ==="
    readelf -h "$1"
    echo -e "\n=== Symbols ==="
    readelf -s "$1" | head -20
}

yara_scan() {
    echo "Scanning with YARA rules..."
    yara -r ~/malware-analysis/yara-rules/yara-rules-repo/index.yar "$1" 2>/dev/null
}
EOL

# Create malware analysis cheat sheet
cat > ~/malware-analysis/CHEATSHEET.md << 'EOL'
# Malware Analysis Cheat Sheet

## Static Analysis

### Basic File Analysis
```bash
file malware.exe                    # Identify file type
strings -a malware.exe | less       # Extract strings
hexdump -C malware.exe | less       # View hex dump
binwalk malware.exe                 # Scan for embedded files
exiftool malware.exe                # View metadata
```

### PE Analysis
```bash
objdump -x malware.exe              # PE headers
objdump -d malware.exe              # Disassemble
pescan malware.exe                  # PE anomalies
peframe malware.exe                 # PE analysis framework
```

### ELF Analysis
```bash
readelf -a malware.elf              # ELF headers
objdump -d malware.elf              # Disassemble
ldd malware.elf                     # List dependencies
strace ./malware.elf                # Trace system calls
```

## Dynamic Analysis

### System Monitoring
```bash
strace -f -e trace=network,file ./malware    # Trace syscalls
ltrace ./malware                              # Trace library calls
lsof -p $(pidof malware)                      # Open files/connections
netstat -tuln                                 # Network connections
tcpdump -i any -w capture.pcap                # Capture traffic
```

### Debugging
```bash
gdb ./malware                       # GNU debugger
r2 -d ./malware                     # Radare2 debugger
edb --run ./malware                 # EDB debugger
```

## Memory Analysis
```bash
volatility3 -f memory.dmp windows.info        # System info
volatility3 -f memory.dmp windows.pslist      # Process list
volatility3 -f memory.dmp windows.netscan     # Network connections
volatility3 -f memory.dmp windows.malfind     # Find injected code
```

## Network Analysis
```bash
tshark -r capture.pcap                        # Analyze PCAP
tcpdump -r capture.pcap -A                    # ASCII output
wireshark capture.pcap                        # GUI analysis
```

## YARA Scanning
```bash
yara rule.yar malware.exe                     # Single rule
yara -r rules_dir/ malware.exe                # Directory of rules
yara -s rule.yar malware.exe                  # Show strings
```

## Useful One-Liners

### Generate hashes
```bash
for hash in md5sum sha1sum sha256sum; do echo -n "$hash: "; $hash file; done
```

### Find suspicious strings
```bash
strings -a file | grep -E '(cmd|powershell|http|ftp|[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'
```

### Extract URLs
```bash
strings -a file | grep -Eo '(http|https|ftp)://[a-zA-Z0-9./?=_-]*'
```

### Find embedded executables
```bash
binwalk -e file
```

## Quick Analysis Script
Save as analyze.sh:
```bash
#!/bin/bash
echo "=== Basic Info ==="
file "$1"
echo -e "\n=== Hashes ==="
md5sum "$1"
sha256sum "$1"
echo -e "\n=== Strings ==="
strings -a "$1" | head -50
echo -e "\n=== Entropy ==="
ent "$1"
echo -e "\n=== YARA Scan ==="
yara -s ~/malware-analysis/yara-rules/yara-rules-repo/index.yar "$1"
```
EOL

echo -e "${GREEN}[+] Creating sample analysis scripts...${NC}"

# Create automated analysis script
cat > ~/malware-analysis/tools/auto-analyze.sh << 'EOL'
#!/bin/bash

if [ $# -eq 0 ]; then
    echo "Usage: $0 <malware_sample>"
    exit 1
fi

SAMPLE="$1"
REPORT_DIR="$HOME/malware-analysis/reports/$(date +%Y%m%d_%H%M%S)_$(basename "$SAMPLE")"
mkdir -p "$REPORT_DIR"

echo "Analyzing: $SAMPLE"
echo "Report directory: $REPORT_DIR"

# Basic info
echo "=== File Information ===" > "$REPORT_DIR/basic_info.txt"
file "$SAMPLE" >> "$REPORT_DIR/basic_info.txt"
echo -e "\n=== Hashes ===" >> "$REPORT_DIR/basic_info.txt"
md5sum "$SAMPLE" >> "$REPORT_DIR/basic_info.txt"
sha1sum "$SAMPLE" >> "$REPORT_DIR/basic_info.txt"
sha256sum "$SAMPLE" >> "$REPORT_DIR/basic_info.txt"

# Strings
strings -a "$SAMPLE" > "$REPORT_DIR/strings.txt"

# YARA scan
yara -r ~/malware-analysis/yara-rules/yara-rules-repo/ "$SAMPLE" > "$REPORT_DIR/yara_results.txt" 2>&1

# PE analysis (if applicable)
if file "$SAMPLE" | grep -q "PE32"; then
    objdump -x "$SAMPLE" > "$REPORT_DIR/pe_headers.txt" 2>&1
    objdump -d "$SAMPLE" > "$REPORT_DIR/disassembly.txt" 2>&1
fi

# ELF analysis (if applicable)
if file "$SAMPLE" | grep -q "ELF"; then
    readelf -a "$SAMPLE" > "$REPORT_DIR/elf_headers.txt" 2>&1
    objdump -d "$SAMPLE" > "$REPORT_DIR/disassembly.txt" 2>&1
fi

echo "Analysis complete! Results saved to: $REPORT_DIR"
EOL

chmod +x ~/malware-analysis/tools/auto-analyze.sh

echo -e "${GREEN}[+] Setting up sandbox directories...${NC}"
# Create isolated sandbox environment
mkdir -p ~/malware-analysis/sandbox/{input,output,logs}
chmod 700 ~/malware-analysis/sandbox

echo ""
echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}     Malware Analysis Environment Setup Complete!${NC}"
echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
echo ""
echo "Important locations:"
echo "  • Workspace: ~/malware-analysis/"
echo "  • Samples: ~/malware-analysis/samples/"
echo "  • Reports: ~/malware-analysis/reports/"
echo "  • YARA rules: ~/malware-analysis/yara-rules/"
echo "  • Tools: ~/malware-analysis/tools/"
echo ""
echo "Useful commands:"
echo "  • mal-env - Activate malware analysis Python environment"
echo "  • analyze_pe <file> - Quick PE file analysis"
echo "  • analyze_elf <file> - Quick ELF file analysis"
echo "  • yara_scan <file> - Scan with YARA rules"
echo "  • auto-analyze.sh <file> - Automated analysis"
echo ""
echo "Check ~/malware-analysis/CHEATSHEET.md for more commands!"
echo ""
echo -e "${YELLOW}[!] Remember: Always analyze malware in an isolated environment!${NC}"
echo -e "${YELLOW}[!] This container should be run with --network none for safety${NC}"