#!/bin/bash
# Launch Kali malware analysis desktop with specialized tools

echo "Starting Kali's Malware Analysis Desktop Environment"
echo "==================================================="

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Check if we're in the right directory
if [ ! -f "$PROJECT_ROOT/docker-compose.yml" ]; then
    echo "Error: docker-compose.yml not found in $PROJECT_ROOT"
    echo "Please run this script from the Kalis-Kali project directory"
    exit 1
fi

# Function to cleanup and restart containers
restart_containers() {
    echo "Restarting containers to ensure clean state..."
    
    # Change to project root
    cd "$PROJECT_ROOT"
    
    # Stop all related containers
    echo "Stopping existing containers..."
    docker-compose down
    
    # Force remove the container if it still exists
    if docker ps -a | grep -q kali-workspace; then
        echo "Force removing kali-workspace container..."
        docker rm -f kali-workspace 2>/dev/null || true
    fi
    
    # Also stop any containers using the kali image
    echo "Stopping any other Kali containers..."
    docker ps -a | grep kali | awk '{print $1}' | xargs -r docker rm -f 2>/dev/null || true
    
    # Clean up ONLY malware-related menu configurations from volumes
    echo "Cleaning up malware menu configurations..."
    # Only remove menu files, not panel configuration
    rm -rf ./config/menus 2>/dev/null || true
    # Don't remove whiskermenu config or panel config - those have our styling!
    
    # Remove XQuartz/X11 lock files that might cause issues
    rm -f /tmp/.X*-lock 2>/dev/null || true
    
    # Start containers fresh
    echo "Starting fresh containers..."
    docker-compose up -d kali
    
    # Wait for container to be ready
    echo "Waiting for container to be ready..."
    sleep 8
    
    # Verify container is running
    if ! docker ps | grep -q kali-workspace; then
        echo "Error: Failed to start kali-workspace container"
        echo "Checking container status..."
        docker ps -a | grep kali
        exit 1
    fi
    
    echo "Container restarted successfully!"
}

# Check for command line arguments
FORCE_RESTART=false
if [ "$1" == "--restart" ] || [ "$1" == "-r" ]; then
    FORCE_RESTART=true
fi

# Handle container restart
if [ "$FORCE_RESTART" == "true" ]; then
    echo "Force restart requested."
    restart_containers
else
    # Ask user if they want to restart containers
    echo "To ensure a clean environment, it's recommended to restart the containers."
    read -p "Do you want to restart the containers? (y/N) " -n 1 -r
    echo ""

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        restart_containers
    else
        # Just check if container is running
        if ! docker ps | grep -q kali-workspace; then
            echo "Error: kali-workspace container is not running"
            echo "Start it with: docker-compose up -d kali"
            exit 1
        fi
        echo "Warning: Using existing container. Old menu entries may persist."
        echo "Run './scripts/kali-malware-analysis.sh --restart' for a clean environment."
    fi
fi

# Check XQuartz
if ! pgrep -x "XQuartz" > /dev/null; then
    echo "Starting XQuartz..."
    open -a XQuartz
    sleep 3
fi

# Configure XQuartz
echo "Configuring XQuartz..."
defaults write org.xquartz.X11 nolisten_tcp -bool false
defaults write org.xquartz.X11 no_auth -bool false
defaults write org.xquartz.X11 enable_iglx -bool true

# Set xhost permissions
export DISPLAY=:0
xhost + > /dev/null 2>&1

# Check if socat is running
if ! pgrep -f "socat.*6000" > /dev/null; then
    echo "Starting X11 bridge..."
    nohup socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:"/tmp/.X11-unix/X0" > /tmp/socat-x11.log 2>&1 &
    SOCAT_PID=$!
    echo "Socat bridge started (PID: $SOCAT_PID)"
    sleep 1
fi

# Verify kali-menu is installed (should be in Docker image now)
echo "Verifying Kali menu system..."
docker exec -u root kali-workspace bash << 'EOMENUCHECK'
if ! dpkg -l | grep -q "^ii  kali-menu "; then
    echo "ERROR: kali-menu is not installed in the Docker image!"
    echo "Please rebuild the Docker image with: ./rebuild-with-menu-fix.sh"
    exit 1
else
    echo "✓ kali-menu is installed"
fi

# Run update-kali-menu if needed
if [ -x /usr/share/kali-menu/update-kali-menu ]; then
    echo "Updating Kali menu..."
    /usr/share/kali-menu/update-kali-menu
fi
EOMENUCHECK

# Install required packages for desktop and malware analysis tools
echo "Installing desktop components and malware analysis tools..."
docker exec -u root kali-workspace sh -c "
apt-get update > /dev/null 2>&1
apt-get install -y --no-install-recommends \
    xfce4-session \
    xfce4-panel \
    xfce4-terminal \
    xfdesktop4 \
    xfwm4 \
    xfce4-settings \
    xfce4-appfinder \
    xfce4-whiskermenu-plugin \
    dbus-x11 \
    x11-xserver-utils \
    kali-menu \
    kali-desktop-xfce \
    xdg-utils \
    desktop-file-utils \
    garcon \
    ghidra \
    radare2 \
    cutter \
    gdb \
    edb-debugger \
    volatility3 \
    yara \
    binwalk \
    hexedit \
    xxd \
    strings \
    file \
    objdump \
    strace \
    ltrace \
    upx-ucl \
    wine \
    wine32 \
    wine64 \
    wireshark \
    tcpdump \
    python3-pefile \
    python3-pyelftools \
    python3-capstone \
    python3-unicorn \
    python3-distorm3 > /dev/null 2>&1

# Explicitly install kali-menu if not present
if ! dpkg -l | grep -q '^ii  kali-menu '; then
    echo 'Installing kali-menu package...'
    apt-get update -qq
    apt-get install -y kali-menu
fi
"

# Create desktop entries for malware analysis tools
echo "Creating malware analysis desktop entries..."
docker exec -u root kali-workspace bash << 'EOSCRIPT'
# First, clean up any existing malware entries to ensure fresh start
echo "Cleaning up any existing malware menu entries..."
rm -f /usr/share/applications/*malware*.desktop 2>/dev/null
rm -f /usr/local/share/applications/*malware*.desktop 2>/dev/null
rm -f /root/.local/share/applications/*malware*.desktop 2>/dev/null
rm -f /home/kali/.local/share/applications/*malware*.desktop 2>/dev/null
rm -f /usr/share/desktop-directories/*malware*.directory 2>/dev/null
# DO NOT remove from applications-merged - this might remove kali menu files!
# rm -rf /etc/xdg/menus/applications-merged/*malware* 2>/dev/null
# We'll create the merged menu file later, don't remove it here
# rm -f /root/.config/menus/xfce-applications.menu 2>/dev/null
# rm -f /home/kali/.config/menus/xfce-applications.menu 2>/dev/null

# Clear only menu caches, not all xfce4 caches
rm -rf /root/.cache/menus/* 2>/dev/null
rm -rf /home/kali/.cache/menus/* 2>/dev/null

# Now create fresh entries
mkdir -p /usr/share/applications
mkdir -p /usr/share/desktop-directories

# Create desktop entries that fit into existing Kali categories
# This avoids creating new categories that might duplicate

# Ghidra - put in reverse engineering category
cat > /usr/share/applications/kali-ghidra-malware.desktop <<EOF
[Desktop Entry]
Name=Ghidra (Malware Analysis)
Comment=NSA Reverse Engineering Tool
Exec=/usr/bin/ghidra
Icon=applications-development
Terminal=false
Type=Application
Categories=kali-forensics;kali-reverse-engineering;
EOF

# Cutter - put in reverse engineering category
cat > /usr/share/applications/kali-cutter-malware.desktop <<EOF
[Desktop Entry]
Name=Cutter (Malware Analysis)
Comment=Radare2 GUI
Exec=/usr/bin/cutter
Icon=applications-debugging
Terminal=false
Type=Application
Categories=kali-forensics;kali-reverse-engineering;
EOF

# EDB Debugger - put in reverse engineering category
cat > /usr/share/applications/kali-edb-malware.desktop <<EOF
[Desktop Entry]
Name=EDB Debugger (Malware Analysis)
Comment=Linux Debugger
Exec=/usr/bin/edb
Icon=applications-debugging
Terminal=false
Type=Application
Categories=kali-forensics;kali-reverse-engineering;
EOF

# Volatility3 - put in forensics category
cat > /usr/share/applications/kali-volatility3-malware.desktop <<EOF
[Desktop Entry]
Name=Volatility3 (Malware Analysis)
Comment=Memory Forensics Framework
Exec=xfce4-terminal --hold -e volatility3
Icon=application-x-executable
Terminal=false
Type=Application
Categories=kali-forensics;
EOF

# YARA - put in forensics category
cat > /usr/share/applications/kali-yara-malware.desktop <<EOF
[Desktop Entry]
Name=YARA Terminal (Malware Analysis)
Comment=Pattern Matching Engine
Exec=xfce4-terminal --hold -e yara
Icon=utilities-terminal
Terminal=false
Type=Application
Categories=kali-forensics;
EOF

# Binwalk - put in reverse engineering category
cat > /usr/share/applications/kali-binwalk-malware.desktop <<EOF
[Desktop Entry]
Name=Binwalk (Malware Analysis)
Comment=Firmware Analysis Tool
Exec=xfce4-terminal --hold -e binwalk
Icon=system-search
Terminal=false
Type=Application
Categories=kali-forensics;kali-reverse-engineering;
EOF

# Hex Editor - put in reverse engineering category
cat > /usr/share/applications/kali-hexedit-malware.desktop <<EOF
[Desktop Entry]
Name=Hex Editor (Malware Analysis)
Comment=Hexadecimal Editor
Exec=xfce4-terminal -e hexedit
Icon=accessories-text-editor
Terminal=false
Type=Application
Categories=kali-forensics;kali-reverse-engineering;
EOF

# Wireshark - put in sniffing category
cat > /usr/share/applications/kali-wireshark-malware.desktop <<EOF
[Desktop Entry]
Name=Wireshark (Malware Analysis)
Comment=Network Protocol Analyzer
Exec=/usr/bin/wireshark
Icon=wireshark
Terminal=false
Type=Application
Categories=kali-network-sniffing;
EOF

# PE Analysis Terminal - put in reverse engineering category
cat > /usr/share/applications/kali-pe-analysis-malware.desktop <<EOF
[Desktop Entry]
Name=PE Analysis Terminal
Comment=Windows PE File Analysis
Exec=xfce4-terminal --hold
Icon=application-x-ms-dos-executable
Terminal=false
Type=Application
Categories=kali-forensics;kali-reverse-engineering;
EOF

# Update desktop database
update-desktop-database /usr/share/applications
update-mime-database /usr/share/mime 2>/dev/null || true

# Set proper permissions
chmod 644 /usr/share/applications/kali-*-malware.desktop

# Clear all menu caches to ensure fresh load
rm -rf /root/.cache/menus/* 2>/dev/null || true
rm -rf /root/.cache/xfce4/* 2>/dev/null || true
rm -rf /home/kali/.cache/menus/* 2>/dev/null || true
rm -rf /home/kali/.cache/xfce4/* 2>/dev/null || true
EOSCRIPT

# Ensure Kali menu structure is properly installed
echo "Ensuring Kali menu structure is installed..."
echo "Installing all 16 Kali tool categories..."
echo "NOTE: This will take 15-30 minutes as these are large metapackages..."
echo ""

docker exec -u root kali-workspace bash << 'EOKALIENU'
# Install Kali menu packages and tools if not already installed
echo "Installing Kali menu structure and tool categories..."
apt-get update -qq

# Install desktop integration packages
apt-get install -y \
    kali-menu \
    kali-themes \
    kali-defaults \
    kali-desktop-xfce \
    menu \
    menu-xdg \
    desktop-file-utils \
    xdg-utils \
    hicolor-icon-theme \
    gnome-icon-theme \
    garcon \
    libgarcon-1-0 \
    libgarcon-common \
    xfce4-whiskermenu-plugin 2>/dev/null

# Install Kali core metapackage first to get menu structure
echo "Installing Kali core packages..."
apt-get install -y kali-linux-default 2>/dev/null || true

# Install ALL Kali tool categories to populate menu (categories 01-16)
echo "Installing all 16 Kali tool categories..."
echo "This will take 15-30 minutes as these are large metapackages..."
echo "The script will wait for installation to complete..."

# Create a marker file to track completion
MARKER_FILE="/tmp/kali-packages-installed"
rm -f "$MARKER_FILE"

# Configure apt for large downloads
export DEBIAN_FRONTEND=noninteractive
apt-get update -qq

# Install packages one by one with timeout and progress
PACKAGES=(
    "kali-tools-information-gathering"
    "kali-tools-vulnerability"
    "kali-tools-web"
    "kali-tools-database"
    "kali-tools-passwords"
    "kali-tools-wireless"
    "kali-tools-reverse-engineering"
    "kali-tools-exploitation"
    "kali-tools-sniffing-spoofing"
    "kali-tools-post-exploitation"
    "kali-tools-forensics"
    "kali-tools-reporting"
    "kali-tools-social-engineering"
    "kali-tools-hardware"
    "kali-tools-crypto-stego"
    "kali-tools-fuzzing"
)

INSTALLED=0
FAILED=0

for package in "${PACKAGES[@]}"; do
    echo ""
    echo "[$((INSTALLED + FAILED + 1))/16] Installing $package..."
    if timeout 600 apt-get install -y --no-install-recommends "$package"; then
        echo "✓ Successfully installed $package"
        ((INSTALLED++))
    else
        echo "✗ Failed to install $package (timeout or error)"
        ((FAILED++))
    fi
done

echo ""
echo "Package installation complete: $INSTALLED successful, $FAILED failed"

# Try to install just the menu structure if packages failed
if [ $FAILED -gt 0 ]; then
    echo "Installing minimal Kali menu structure..."
    apt-get install -y --no-install-recommends kali-menu kali-desktop-xfce || true
fi

# Show package installation status
echo ""
echo "Checking installed Kali tool packages..."
INSTALLED_COUNT=$(dpkg -l | grep -E '^ii  kali-tools-' | wc -l)
echo "Currently installed Kali tool packages: $INSTALLED_COUNT"

if [ "$INSTALLED_COUNT" -lt 16 ]; then
    echo ""
    echo "Note: Some packages may not have been installed due to size/timeout."
    echo "The desktop will still work, but some menu categories may be missing."
fi

# Signal that package installation is complete
touch "$MARKER_FILE"
echo "Package installation phase completed."

# Rebuild all menu databases
echo "Rebuilding menu databases..."
update-desktop-database -v /usr/share/applications
update-mime-database /usr/share/mime
update-menus
gtk-update-icon-cache -f /usr/share/icons/hicolor 2>/dev/null || true
gtk-update-icon-cache -f /usr/share/icons/gnome 2>/dev/null || true

# Clear all menu caches
rm -rf /home/kali/.cache/menus/*
rm -rf /root/.cache/menus/*

# Update desktop database to ensure all apps are visible
echo "Updating desktop database..."
update-desktop-database /usr/share/applications

# Apply Kali Whisker menu configuration
echo "Configuring Whisker menu..."
mkdir -p /home/kali/.config/xfce4/panel
mkdir -p /root/.config/xfce4/panel

# Create Whisker menu configuration that shows all categories
cat > /home/kali/.config/xfce4/panel/whiskermenu-1.rc <<'EOF'
favorites=xfce4-terminal.desktop,firefox-esr.desktop,kali-burpsuite.desktop,kali-metasploit-framework.desktop,kali-wireshark.desktop
recent=
button-icon=kali-menu
button-single-row=false
show-button-title=false
show-button-icon=true
launcher-show-name=true
launcher-show-description=true
launcher-show-tooltip=true
item-icon-size=2
hover-switch-category=false
category-show-name=true
category-icon-size=1
load-hierarchy=true
view-as-icons=false
default-category=0
recent-items-max=10
favorites-in-recent=true
position-search-alternate=true
position-commands-alternate=false
position-categories-alternate=true
stay-on-focus-out=false
confirm-session-command=true
menu-width=450
menu-height=550
menu-opacity=100
command-settings=xfce4-settings-manager
show-command-settings=true
command-lockscreen=xflock4
show-command-lockscreen=true
command-switchuser=dm-tool switch-to-greeter
show-command-switchuser=false
command-logoutuser=xfce4-session-logout --logout --fast
show-command-logoutuser=false
command-restart=xfce4-session-logout --reboot --fast
show-command-restart=false
command-shutdown=xfce4-session-logout --halt --fast
show-command-shutdown=false
command-suspend=xfce4-session-logout --suspend
show-command-suspend=false
command-hibernate=xfce4-session-logout --hibernate
show-command-hibernate=false
command-logout=xfce4-session-logout
show-command-logout=true
command-menueditor=menulibre
show-command-menueditor=true
command-profile=mugshot
show-command-profile=false
search-actions=5
EOF

cp /home/kali/.config/xfce4/panel/whiskermenu-1.rc /root/.config/xfce4/panel/whiskermenu-1.rc
chown -R kali:kali /home/kali/.config/xfce4/panel
chown -R root:root /root/.config/xfce4/panel

# Update desktop database
update-desktop-database /usr/share/applications/

echo "Kali menu structure ensured"
EOKALIENU

# Wait for package installation to complete
echo ""
echo "Waiting for Kali package installation to complete..."
echo "This may take 15-30 minutes for all 16 metapackages..."
COUNTER=0
MAX_WAIT=1800  # 30 minutes max
while [ $COUNTER -lt $MAX_WAIT ]; do
    if docker exec -u root kali-workspace test -f /tmp/kali-packages-installed; then
        echo "Package installation completed!"
        break
    fi
    # Show progress every 30 seconds
    if [ $((COUNTER % 30)) -eq 0 ] && [ $COUNTER -gt 0 ]; then
        echo "Still installing packages... ($((COUNTER/60)) minutes elapsed)"
        # Show current package being installed
        CURRENT_PKG=$(docker exec -u root kali-workspace bash -c "ps aux | grep -E 'apt-get install.*kali-tools' | grep -v grep | head -1" || true)
        if [ -n "$CURRENT_PKG" ]; then
            echo "  Currently working on: $(echo "$CURRENT_PKG" | grep -oE 'kali-tools-[a-z-]+' || echo "package installation")"
        fi
    fi
    sleep 5
    ((COUNTER+=5))
done

if [ $COUNTER -ge $MAX_WAIT ]; then
    echo "Warning: Package installation timeout after 30 minutes"
    echo "Some packages may not have been installed"
fi

# Show final package count
echo ""
echo "Checking installed Kali tool packages..."
INSTALLED_COUNT=$(docker exec -u root kali-workspace bash -c "dpkg -l | grep -E '^ii  kali-tools-' | wc -l")
echo "Currently installed Kali tool packages: $INSTALLED_COUNT"

if [ "$INSTALLED_COUNT" -lt 16 ]; then
    echo ""
    echo "Some packages may not have been installed due to size/timeout."
    echo "To install them manually, run:"
    echo "  ./scripts/install-kali-tools-direct.sh"
fi

# Fix application menu entries and ensure Kali menu is properly loaded
echo "Setting up complete Kali menu system..."
docker exec -u root kali-workspace bash << 'EOMENU'
# Ensure the Kali menu structure is installed
echo "Verifying Kali menu installation..."
if ! dpkg -l | grep -q "kali-desktop-xfce"; then
    apt-get update -qq
    apt-get install -y kali-desktop-xfce 2>/dev/null
fi

# Create the Kali menu directory structure if missing
mkdir -p /usr/share/desktop-directories

# Ensure Kali menu categories exist
for i in {01..20}; do
    if [ ! -f "/usr/share/desktop-directories/kali-$i-*.directory" ]; then
        echo "Creating missing category $i..."
    fi
done

# Update all menu databases
update-desktop-database -v /usr/share/applications
update-mime-database /usr/share/mime
update-menus
gtk-update-icon-cache -f /usr/share/icons/hicolor 2>/dev/null || true
gtk-update-icon-cache -f /usr/share/icons/gnome 2>/dev/null || true

# Clear all caches
rm -rf /home/kali/.cache/menus/*
rm -rf /home/kali/.config/menus/*
rm -rf /root/.cache/menus/*
rm -rf /root/.config/menus/*

# Create directories with proper permissions
mkdir -p /home/kali/.local/share/applications
mkdir -p /home/kali/.config/menus
mkdir -p /home/kali/.config/xfce4/panel

# CRITICAL FIX: Create XFCE menu that explicitly includes Kali menu
echo "Applying Kali menu integration fix..."
cat > /root/.config/menus/xfce-applications.menu << 'EOXFCEMENU'
<!DOCTYPE Menu PUBLIC "-//freedesktop//DTD Menu 1.0//EN"
  "http://www.freedesktop.org/standards/menu-spec/1.0/menu.dtd">

<Menu>
    <Name>Xfce</Name>

    <DefaultAppDirs/>
    <DefaultDirectoryDirs/>
    <DefaultMergeDirs/>

    <!-- Include standard XFCE items -->
    <Include>
        <Category>X-Xfce-Toplevel</Category>
    </Include>

    <!-- CRITICAL: Explicitly merge the Kali menu -->
    <MergeFile type="parent">/etc/xdg/menus/applications-merged/kali-applications.menu</MergeFile>

    <!-- Standard Categories -->
    <Menu>
        <Name>Settings</Name>
        <Directory>xfce-settings.directory</Directory>
        <Include>
            <Or>
                <Category>Settings</Category>
                <Category>DesktopSettings</Category>
            </Or>
        </Include>
    </Menu>

    <Menu>
        <Name>Accessories</Name>
        <Directory>xfce-accessories.directory</Directory>
        <Include>
            <Or>
                <Category>Accessibility</Category>
                <Category>Core</Category>
                <Category>Legacy</Category>
                <Category>Utility</Category>
            </Or>
        </Include>
    </Menu>

    <Menu>
        <Name>Development</Name>
        <Directory>xfce-development.directory</Directory>
        <Include>
            <Category>Development</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Education</Name>
        <Directory>xfce-education.directory</Directory>
        <Include>
            <Category>Education</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Games</Name>
        <Directory>xfce-games.directory</Directory>
        <Include>
            <Category>Game</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Graphics</Name>
        <Directory>xfce-graphics.directory</Directory>
        <Include>
            <Category>Graphics</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Multimedia</Name>
        <Directory>xfce-multimedia.directory</Directory>
        <Include>
            <Or>
                <Category>Audio</Category>
                <Category>Video</Category>
                <Category>AudioVideo</Category>
            </Or>
        </Include>
    </Menu>

    <Menu>
        <Name>Network</Name>
        <Directory>xfce-network.directory</Directory>
        <Include>
            <Category>Network</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Office</Name>
        <Directory>xfce-office.directory</Directory>
        <Include>
            <Category>Office</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>System</Name>
        <Directory>xfce-system.directory</Directory>
        <Include>
            <Or>
                <Category>Emulator</Category>
                <Category>System</Category>
            </Or>
        </Include>
    </Menu>

    <Menu>
        <Name>Other</Name>
        <Directory>xfce-other.directory</Directory>
        <OnlyUnallocated/>
        <Include>
            <All/>
        </Include>
    </Menu>

    <Layout>
        <Merge type="menus"/>
        <Separator/>
        <Menuname>Settings</Menuname>
        <Menuname>Accessories</Menuname>
        <Menuname>Development</Menuname>
        <Menuname>Education</Menuname>
        <Menuname>Games</Menuname>
        <Menuname>Graphics</Menuname>
        <Menuname>Multimedia</Menuname>
        <Menuname>Network</Menuname>
        <Menuname>Office</Menuname>
        <Menuname>System</Menuname>
        <Menuname>Other</Menuname>
    </Layout>
</Menu>
EOXFCEMENU

# Copy to kali user as well
cp /root/.config/menus/xfce-applications.menu /home/kali/.config/menus/
chown -R kali:kali /home/kali/.cache /home/kali/.config /home/kali/.local 2>/dev/null || true

# Force update desktop menu
xdg-desktop-menu forceupdate 2>/dev/null || true
EOMENU

# Kill any existing desktop processes
echo "Cleaning up any existing desktop sessions..."
docker exec kali-workspace sh -c "
pkill -f xfce4-session 2>/dev/null || true
pkill -f xfwm4 2>/dev/null || true
pkill -f xfdesktop 2>/dev/null || true
pkill -f xfce4-panel 2>/dev/null || true
sleep 2
"

echo ""
echo "Launching Malware Analysis Desktop..."
echo "==================================="
echo ""

# Start D-Bus
echo "Starting D-Bus service..."
docker exec kali-workspace sh -c "service dbus start 2>/dev/null || true"

# Set up proper environment
docker exec kali-workspace sh -c "
export DISPLAY=host.docker.internal:0
export DBUS_SESSION_BUS_ADDRESS=\$(dbus-launch --autolaunch=\$(cat /var/lib/dbus/machine-id) --binary-syntax --close-stderr)
export XDG_RUNTIME_DIR=/tmp/runtime-root
mkdir -p \$XDG_RUNTIME_DIR
chmod 0700 \$XDG_RUNTIME_DIR
"

# Start window manager first
echo "Starting window manager..."
docker exec -d kali-workspace sh -c "DISPLAY=host.docker.internal:0 xfwm4 --compositor=off --sm-client-disable"
sleep 2

# Launch desktop components
echo "Starting desktop background..."
docker exec -d kali-workspace sh -c "DISPLAY=host.docker.internal:0 xfdesktop --sm-client-disable"

echo "Configuring malware analysis panel..."
# Configure vertical panel with malware tools
docker exec kali-workspace bash << 'EOPANEL'
    # Kill any existing panel
    pkill xfce4-panel 2>/dev/null
    sleep 1
    
    # Create malware analysis panel configuration
    mkdir -p /root/.config/xfce4/xfconf/xfce-perchannel-xml
    
    cat > /root/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xfce4-panel" version="1.0">
  <property name="configver" type="int" value="2"/>
  <property name="panels" type="array">
    <value type="int" value="1"/>
    <property name="panel-1" type="empty">
      <property name="position" type="string" value="p=11;x=0;y=0"/>
      <property name="position-locked" type="bool" value="true"/>
      <property name="size" type="uint" value="56"/>
      <property name="length" type="uint" value="100"/>
      <property name="plugin-ids" type="array">
        <value type="int" value="1"/>
        <value type="int" value="2"/>
        <value type="int" value="3"/>
        <value type="int" value="4"/>
        <value type="int" value="5"/>
        <value type="int" value="6"/>
        <value type="int" value="7"/>
        <value type="int" value="8"/>
        <value type="int" value="9"/>
        <value type="int" value="10"/>
        <value type="int" value="11"/>
      </property>
      <property name="mode" type="uint" value="1"/>
      <property name="autohide-behavior" type="uint" value="0"/>
      <property name="background-style" type="uint" value="1"/>
      <property name="background-alpha" type="uint" value="90"/>
    </property>
  </property>
  <property name="plugins" type="empty">
    <property name="plugin-1" type="string" value="whiskermenu">
      <property name="button-icon" type="string" value="kali-menu"/>
      <property name="show-button-title" type="bool" value="false"/>
      <property name="load-hierarchy" type="bool" value="true"/>
    </property>
    <property name="plugin-2" type="string" value="separator">
      <property name="style" type="uint" value="1"/>
    </property>
    <property name="plugin-3" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="xfce4-terminal.desktop"/>
      </property>
    </property>
    <property name="plugin-4" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="kali-ghidra-malware.desktop"/>
      </property>
    </property>
    <property name="plugin-5" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="kali-cutter-malware.desktop"/>
      </property>
    </property>
    <property name="plugin-6" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="kali-edb-malware.desktop"/>
      </property>
    </property>
    <property name="plugin-7" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="thunar.desktop"/>
      </property>
    </property>
    <property name="plugin-8" type="string" value="separator">
      <property name="style" type="uint" value="1"/>
    </property>
    <property name="plugin-9" type="string" value="tasklist">
      <property name="show-labels" type="bool" value="false"/>
      <property name="show-handle" type="bool" value="false"/>
      <property name="flat-buttons" type="bool" value="true"/>
      <property name="sort-order" type="uint" value="4"/>
      <property name="grouping" type="uint" value="1"/>
    </property>
    <property name="plugin-10" type="string" value="separator">
      <property name="expand" type="bool" value="true"/>
      <property name="style" type="uint" value="0"/>
    </property>
    <property name="plugin-11" type="string" value="systray">
      <property name="square-icons" type="bool" value="true"/>
      <property name="show-frame" type="bool" value="false"/>
    </property>
  </property>
</channel>
EOF
    
    # Configure window manager to respect panel space
    cat > /root/.config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xfwm4" version="1.0">
  <property name="general" type="empty">
    <property name="margin_left" type="int" value="58"/>
    <property name="margin_right" type="int" value="0"/>
    <property name="margin_top" type="int" value="0"/>
    <property name="margin_bottom" type="int" value="0"/>
    <property name="snap_to_border" type="bool" value="true"/>
    <property name="snap_to_windows" type="bool" value="true"/>
    <property name="snap_width" type="int" value="10"/>
  </property>
</channel>
EOF
    
    # Clear cache
    rm -rf /root/.cache/sessions/xfce4-panel*
EOPANEL

echo "Configuring and refreshing whisker menu..."
docker exec -u root kali-workspace bash << 'EOWHISKER'
# The menu fix has already been applied earlier, just ensure it's in place
echo "Verifying Kali menu integration..."

# Ensure we have the Kali applications menu file
if [ ! -f /etc/xdg/menus/applications-merged/kali-applications.menu ]; then
    echo "ERROR: Kali applications menu not found. Installing..."
    apt-get update -qq
    apt-get install -y --reinstall kali-menu 2>/dev/null
fi

# Run update-kali-menu to ensure all desktop files are current
if [ -x /usr/share/kali-menu/update-kali-menu ]; then
    echo "Updating Kali menu entries..."
    /usr/share/kali-menu/update-kali-menu
fi

# The menu merge was already done earlier, skip recreating it
echo "Menu merge already applied..."

# Ensure whisker menu uses the Kali menu
mkdir -p /root/.config/xfce4/panel
cat > /root/.config/xfce4/panel/whiskermenu-1.rc <<'EOF'
favorites=xfce4-terminal.desktop,firefox-esr.desktop,kali-burpsuite.desktop,kali-metasploit-framework.desktop,kali-wireshark.desktop
recent=
button-icon=kali-menu
button-single-row=false
show-button-title=false
show-button-icon=true
launcher-show-name=true
launcher-show-description=true
launcher-show-tooltip=true
item-icon-size=2
hover-switch-category=false
category-show-name=true
category-icon-size=1
load-hierarchy=true
view-as-icons=false
default-category=0
recent-items-max=10
favorites-in-recent=true
position-search-alternate=true
position-commands-alternate=false
position-categories-alternate=true
stay-on-focus-out=false
confirm-session-command=true
menu-width=450
menu-height=550
menu-opacity=100
command-settings=xfce4-settings-manager
show-command-settings=true
command-lockscreen=xflock4
show-command-lockscreen=true
command-switchuser=dm-tool switch-to-greeter
show-command-switchuser=false
command-logoutuser=xfce4-session-logout --logout --fast
show-command-logoutuser=false
command-restart=xfce4-session-logout --reboot --fast
show-command-restart=false
command-shutdown=xfce4-session-logout --halt --fast
show-command-shutdown=false
command-suspend=xfce4-session-logout --suspend
show-command-suspend=false
command-hibernate=xfce4-session-logout --hibernate
show-command-hibernate=false
command-logout=xfce4-session-logout
show-command-logout=true
command-menueditor=menulibre
show-command-menueditor=true
command-profile=mugshot
show-command-profile=false
search-actions=5
EOF

# Force whisker menu to reload its configuration
pkill -USR1 xfce4-panel 2>/dev/null || true

# Ensure menu databases are current
update-desktop-database /usr/share/applications
update-menus

# Clear and refresh menu caches
rm -rf /root/.cache/menus/*
rm -rf /home/kali/.cache/menus/*
rm -rf /root/.cache/xfce4/panel/*
rm -rf /home/kali/.cache/xfce4/panel/*

# Ensure the merged menu is used
if [ ! -f /root/.config/menus/applications-merged/kali-applications.menu ]; then
    mkdir -p /root/.config/menus/applications-merged
    cp /etc/xdg/menus/applications-merged/kali-applications.menu /root/.config/menus/applications-merged/
fi

# Force desktop menu update
xdg-desktop-menu forceupdate

# Restart panel to ensure menu is fully loaded
xfce4-panel -r

# Clear menu caches to ensure fresh load
rm -rf /root/.cache/menus/* 2>/dev/null || true
rm -rf /home/kali/.cache/menus/* 2>/dev/null || true

# Force desktop menu update
xdg-desktop-menu forceupdate 2>/dev/null || true

echo "Whisker menu configured with Kali menu structure"
EOWHISKER

echo "Starting malware analysis panel..."
docker exec -d kali-workspace sh -c "DISPLAY=host.docker.internal:0 xfce4-panel --sm-client-disable"

# Wait for panel to start
sleep 3

# CRITICAL: Apply menu fix AFTER panel has started
echo "Applying Kali menu fix after panel startup..."
docker exec -u root kali-workspace bash << 'EOFINALFIX'
# Always reapply the menu merge to override panel defaults
echo "Ensuring Kali menu is properly integrated..."
mkdir -p /root/.config/menus
cat > /root/.config/menus/xfce-applications.menu << 'EOXFCEMENU'
<!DOCTYPE Menu PUBLIC "-//freedesktop//DTD Menu 1.0//EN"
  "http://www.freedesktop.org/standards/menu-spec/1.0/menu.dtd">

<Menu>
    <Name>Xfce</Name>

    <DefaultAppDirs/>
    <DefaultDirectoryDirs/>
    <DefaultMergeDirs/>

    <!-- Include standard XFCE items -->
    <Include>
        <Category>X-Xfce-Toplevel</Category>
    </Include>

    <!-- CRITICAL: Explicitly merge the Kali menu -->
    <MergeFile type="parent">/etc/xdg/menus/applications-merged/kali-applications.menu</MergeFile>

    <!-- Standard Categories -->
    <Menu>
        <Name>Settings</Name>
        <Directory>xfce-settings.directory</Directory>
        <Include>
            <Or>
                <Category>Settings</Category>
                <Category>DesktopSettings</Category>
            </Or>
        </Include>
    </Menu>

    <Menu>
        <Name>Accessories</Name>
        <Directory>xfce-accessories.directory</Directory>
        <Include>
            <Or>
                <Category>Accessibility</Category>
                <Category>Core</Category>
                <Category>Legacy</Category>
                <Category>Utility</Category>
            </Or>
        </Include>
    </Menu>

    <Menu>
        <Name>Development</Name>
        <Directory>xfce-development.directory</Directory>
        <Include>
            <Category>Development</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Education</Name>
        <Directory>xfce-education.directory</Directory>
        <Include>
            <Category>Education</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Games</Name>
        <Directory>xfce-games.directory</Directory>
        <Include>
            <Category>Game</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Graphics</Name>
        <Directory>xfce-graphics.directory</Directory>
        <Include>
            <Category>Graphics</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Multimedia</Name>
        <Directory>xfce-multimedia.directory</Directory>
        <Include>
            <Or>
                <Category>Audio</Category>
                <Category>Video</Category>
                <Category>AudioVideo</Category>
            </Or>
        </Include>
    </Menu>

    <Menu>
        <Name>Network</Name>
        <Directory>xfce-network.directory</Directory>
        <Include>
            <Category>Network</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>Office</Name>
        <Directory>xfce-office.directory</Directory>
        <Include>
            <Category>Office</Category>
        </Include>
    </Menu>

    <Menu>
        <Name>System</Name>
        <Directory>xfce-system.directory</Directory>
        <Include>
            <Or>
                <Category>Emulator</Category>
                <Category>System</Category>
            </Or>
        </Include>
    </Menu>

    <Menu>
        <Name>Other</Name>
        <Directory>xfce-other.directory</Directory>
        <OnlyUnallocated/>
        <Include>
            <All/>
        </Include>
    </Menu>

    <Layout>
        <Merge type="menus"/>
        <Separator/>
        <Menuname>Settings</Menuname>
        <Menuname>Accessories</Menuname>
        <Menuname>Development</Menuname>
        <Menuname>Education</Menuname>
        <Menuname>Games</Menuname>
        <Menuname>Graphics</Menuname>
        <Menuname>Multimedia</Menuname>
        <Menuname>Network</Menuname>
        <Menuname>Office</Menuname>
        <Menuname>System</Menuname>
        <Menuname>Other</Menuname>
    </Layout>
</Menu>
EOXFCEMENU

# Copy to kali user as well
cp /root/.config/menus/xfce-applications.menu /home/kali/.config/menus/
chown -R kali:kali /home/kali/.config/menus

# Clear menu caches
rm -rf /root/.cache/menus/*
rm -rf /home/kali/.cache/menus/*

# Force panel to reload configuration
xfce4-panel -r
sleep 3

# Double-check by setting xfconf property
if command -v xfconf-query >/dev/null 2>&1; then
    xfconf-query -c xfce4-panel -p /plugins/plugin-1/load-hierarchy -t bool -s true --create 2>/dev/null || true
fi

# One more panel restart to ensure everything is loaded
pkill -HUP xfce4-panel || true
sleep 2

echo "Menu fix applied after panel startup"
EOFINALFIX

echo "Starting terminal with malware analysis welcome..."
docker exec -d kali-workspace sh -c 'DISPLAY=host.docker.internal:0 xfce4-terminal -e "bash -c \"echo \\\"═══════════════════════════════════════════════════════════════\\\"; echo \\\"         Welcome to Kali'"'"'s Malware Analysis Desktop\\\"; echo \\\"═══════════════════════════════════════════════════════════════\\\"; echo \\\"\\\"; echo \\\"Quick Commands:\\\"; echo \\\"  • ghidra          - NSA Reverse Engineering Suite\\\"; echo \\\"  • cutter          - Radare2 GUI\\\"; echo \\\"  • edb             - Linux Debugger\\\"; echo \\\"  • volatility3     - Memory Forensics\\\"; echo \\\"  • yara            - Pattern Matching\\\"; echo \\\"  • binwalk         - Firmware Analysis\\\"; echo \\\"  • hexedit         - Hex Editor\\\"; echo \\\"  • wireshark       - Network Analysis\\\"; echo \\\"\\\"; echo \\\"Analysis shortcuts:\\\"; echo \\\"  • file <sample>   - Identify file type\\\"; echo \\\"  • strings <sample> - Extract strings\\\"; echo \\\"  • objdump -x <pe> - PE headers\\\"; echo \\\"  • readelf -a <elf> - ELF analysis\\\"; echo \\\"\\\"; bash\""'

echo ""
echo "Malware Analysis Desktop Launched!"
echo "================================="
echo ""
echo "Desktop features:"
echo "• Vertical panel (56px wide) with malware analysis tools"
echo "• Full Kali menu with all tool categories (MITRE ATT&CK based)"
echo "• Quick launchers: Terminal, Ghidra, Cutter, EDB, File Manager"
echo "• Malware tools integrated into appropriate Kali categories"
echo "• Clock and system tray included"
echo ""
echo "💡 Tips:"
echo "• Click Kali dragon → Navigate to Kali categories:"
echo "  - Reconnaissance - Information gathering tools"
echo "  - Persistence - Tools for maintaining access"
echo "  - Discovery - System and network discovery"
echo "  - Collection - Data collection tools"
echo "  - Impact - Tools that affect availability"
echo "  - Forensics - Volatility3, YARA, and analysis tools"
echo "  - Reverse Engineering - Ghidra, Cutter, EDB, Binwalk"
echo "  - Network Sniffing - Wireshark and packet analysis"
echo "• Use quick launchers for frequently used tools"
echo "• Terminal opened with malware analysis command reference"
echo ""
echo "⚠️  SAFETY REMINDER:"
echo "• Always analyze malware in isolated environments"
echo "• Consider using --network none when analyzing samples"
echo "• Take VM snapshots before dynamic analysis"
echo ""
echo "To stop: Close all windows or press Ctrl+C here"

# Keep script running and monitor
while true; do
    if ! docker ps | grep -q kali-workspace; then
        echo "Container stopped"
        break
    fi
    sleep 5
done