#!/bin/bash

# Malware Analysis Tools Installation Script
# Specialized tools for malware analysis and reverse engineering

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored messages
print_msg() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_error() {
    echo -e "${RED}[!]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[*]${NC} $1"
}

print_msg "Installing Malware Analysis Tools"
echo "================================="

# Update package lists
print_msg "Updating package lists..."
apt-get update

# Categories of malware analysis tools
print_msg "Installing static analysis tools..."
STATIC_TOOLS=(
    # Disassemblers/Debuggers
    ghidra
    radare2
    rizin
    cutter
    edb-debugger
    gdb
    
    # Binary analysis
    binwalk
    hexedit
    hexdump
    xxd
    strings
    file
    exiftool
    binutils
    
    # PE/ELF analysis
    pefile
    peframe
    pescan
    readelf
    objdump
    nm
    ldd
)

print_msg "Installing dynamic analysis tools..."
DYNAMIC_TOOLS=(
    # System monitoring
    strace
    ltrace
    sysdig
    
    # Memory analysis
    volatility3
    
    # Process monitoring
    htop
    lsof
    netstat
    ss
    
    # Sandboxing
    firejail
    
    # Virtualization
    qemu-system
    qemu-user
    qemu-user-static
)

print_msg "Installing network analysis tools..."
NETWORK_TOOLS=(
    # Packet capture
    wireshark
    tshark
    tcpdump
    
    # Traffic analysis
    mitmproxy
    bettercap
    ettercap-text-only
    
    # DNS analysis
    dnsutils
    dnstracer
    
    # Protocol analysis
    ngrep
    tcpflow
)

print_msg "Installing document analysis tools..."
DOCUMENT_TOOLS=(
    # Office documents
    oletools
    olevba
    
    # PDF analysis
    pdf-parser
    pdfid
    peepdf
    qpdf
    
    # Archive analysis
    p7zip-full
    unrar
    cabextract
    unzip
    arj
    lha
    
    # Compression
    upx-ucl
)

print_msg "Installing Windows analysis tools..."
WINDOWS_TOOLS=(
    # Windows compatibility
    wine
    wine64
    mono-complete
    
    # Registry analysis
    regripper
    hivex
    hivex-bin
)

print_msg "Installing mobile analysis tools..."
MOBILE_TOOLS=(
    # Android
    adb
    fastboot
    apktool
    dex2jar
    
    # General mobile
    libimobiledevice-utils
)

# Install all tool categories
ALL_TOOLS=(
    "${STATIC_TOOLS[@]}"
    "${DYNAMIC_TOOLS[@]}"
    "${NETWORK_TOOLS[@]}"
    "${DOCUMENT_TOOLS[@]}"
    "${WINDOWS_TOOLS[@]}"
    "${MOBILE_TOOLS[@]}"
)

# Install tools with progress tracking
total=${#ALL_TOOLS[@]}
current=0
failed_tools=()

for tool in "${ALL_TOOLS[@]}"; do
    current=$((current + 1))
    echo -n "[$current/$total] Installing $tool... "
    
    if dpkg -l 2>/dev/null | grep -q "^ii  $tool"; then
        echo "already installed"
    else
        if apt-get install -y $tool >/dev/null 2>&1; then
            echo "done"
        else
            echo "failed"
            failed_tools+=("$tool")
        fi
    fi
done

# Install Python-based malware analysis tools
print_msg "Installing Python-based analysis tools..."
pip3 install --break-system-packages \
    yara-python \
    pefile \
    pyelftools \
    capstone \
    unicorn \
    keystone-engine \
    ropper \
    angr \
    cryptography \
    oletools \
    python-magic \
    pyzipper \
    androguard \
    r2pipe \
    frida-tools \
    dnspython \
    impacket \
    scapy \
    mitmproxy \
    2>/dev/null || print_warning "Some Python packages failed to install"

# Install YARA rules
print_msg "Setting up YARA rules..."
mkdir -p /opt/yara-rules
cd /opt/yara-rules

# Clone popular YARA rule repositories
if [ ! -d "rules" ]; then
    git clone https://github.com/Yara-Rules/rules.git 2>/dev/null || print_warning "Failed to clone Yara-Rules"
fi

if [ ! -d "signature-base" ]; then
    git clone https://github.com/Neo23x0/signature-base.git 2>/dev/null || print_warning "Failed to clone signature-base"
fi

# Install additional RE tools from GitHub
print_msg "Installing additional tools from GitHub..."
mkdir -p /opt/malware-tools
cd /opt/malware-tools

# FLOSS (FLARE Obfuscated String Solver)
if [ ! -d "flare-floss" ]; then
    git clone https://github.com/fireeye/flare-floss 2>/dev/null || print_warning "Failed to clone FLOSS"
fi

# XLMMacroDeobfuscator
if [ ! -d "XLMMacroDeobfuscator" ]; then
    git clone https://github.com/DissectMalware/XLMMacroDeobfuscator 2>/dev/null || print_warning "Failed to clone XLMMacroDeobfuscator"
fi

# Set permissions
chown -R kali:kali /opt/malware-tools /opt/yara-rules 2>/dev/null || true

# Create helpful aliases
print_msg "Creating analysis aliases..."
cat >> /home/kali/.zshrc << 'EOF'

# Malware Analysis Aliases
alias yara-scan='yara -r /opt/yara-rules/rules/malware_index.yar'
alias strings-all='strings -a'
alias hex='hexdump -C'
alias pe-info='python3 -m pefile'
alias elf-info='readelf -a'

# Quick analysis functions
analyze_file() {
    echo "=== File Analysis: $1 ==="
    file "$1"
    echo ""
    echo "=== Strings (first 50) ==="
    strings "$1" | head -50
    echo ""
    echo "=== Hex dump (first 512 bytes) ==="
    hexdump -C "$1" | head -32
}

# Network monitoring
monitor_network() {
    echo "Starting network monitoring..."
    tcpdump -i any -w /tmp/capture_$(date +%Y%m%d_%H%M%S).pcap
}
EOF

# Create analysis workspace
print_msg "Creating analysis workspace..."
mkdir -p /home/kali/malware-analysis/{samples,reports,tools,scripts,yara}
chown -R kali:kali /home/kali/malware-analysis

# Create sample analysis script
cat > /home/kali/malware-analysis/scripts/analyze.sh << 'EOF'
#!/bin/bash
# Quick malware analysis script

if [ $# -eq 0 ]; then
    echo "Usage: $0 <malware_sample>"
    exit 1
fi

SAMPLE="$1"
REPORT="report_$(basename $SAMPLE)_$(date +%Y%m%d_%H%M%S).txt"

echo "Analyzing: $SAMPLE" | tee $REPORT
echo "=========================" | tee -a $REPORT
echo "" | tee -a $REPORT

echo "File Information:" | tee -a $REPORT
file "$SAMPLE" | tee -a $REPORT
echo "" | tee -a $REPORT

echo "MD5: $(md5sum $SAMPLE | cut -d' ' -f1)" | tee -a $REPORT
echo "SHA1: $(sha1sum $SAMPLE | cut -d' ' -f1)" | tee -a $REPORT
echo "SHA256: $(sha256sum $SAMPLE | cut -d' ' -f1)" | tee -a $REPORT
echo "" | tee -a $REPORT

echo "Strings Analysis:" | tee -a $REPORT
strings -a "$SAMPLE" | head -100 | tee -a $REPORT
echo "" | tee -a $REPORT

if command -v yara >/dev/null; then
    echo "YARA Scan:" | tee -a $REPORT
    yara -s /opt/yara-rules/rules/malware_index.yar "$SAMPLE" 2>/dev/null | tee -a $REPORT || echo "No YARA matches"
fi

echo "" | tee -a $REPORT
echo "Report saved to: $REPORT"
EOF

chmod +x /home/kali/malware-analysis/scripts/analyze.sh
chown -R kali:kali /home/kali/malware-analysis

# Installation summary
echo ""
echo "======================================"
print_msg "Malware Analysis Setup Complete!"
echo "======================================"

if [ ${#failed_tools[@]} -gt 0 ]; then
    print_warning "The following tools failed to install:"
    for tool in "${failed_tools[@]}"; do
        echo "  - $tool"
    done
fi

echo ""
print_msg "Installed components:"
echo "  ✓ Static analysis tools (Ghidra, Radare2, etc.)"
echo "  ✓ Dynamic analysis tools (strace, ltrace, etc.)"
echo "  ✓ Network analysis tools (Wireshark, tcpdump, etc.)"
echo "  ✓ Document analysis tools (oletools, pdf-parser, etc.)"
echo "  ✓ YARA rules in /opt/yara-rules/"
echo "  ✓ Analysis workspace in ~/malware-analysis/"
echo ""
print_msg "Quick start:"
echo "  Analyze a file: ~/malware-analysis/scripts/analyze.sh <file>"
echo "  YARA scan: yara-scan <file>"
echo "  PE analysis: pe-info <file>"
echo ""
print_warning "Remember: Always analyze malware in an isolated environment!"