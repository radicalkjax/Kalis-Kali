#!/bin/bash

# Automated Malware Analysis Helper
# Safe, comprehensive analysis workflow

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_msg() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_error() {
    echo -e "${RED}[!]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[*]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[i]${NC} $1"
}

# Default values
SAMPLE=""
OUTPUT_DIR=""
SKIP_DYNAMIC=true
VERBOSE=false
NETWORK_MONITOR=false

# Usage function
show_usage() {
    echo "Usage: $0 [OPTIONS] <sample_file>"
    echo ""
    echo "Automated malware analysis with safety checks"
    echo ""
    echo "Options:"
    echo "  -o DIR       Output directory for reports (default: ~/malware-analysis/reports)"
    echo "  -d           Include dynamic analysis (DANGEROUS)"
    echo "  -n           Enable network monitoring"
    echo "  -v           Verbose output"
    echo "  -h           Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 suspicious.exe                    # Static analysis only"
    echo "  $0 -o /tmp/analysis malware.bin     # Custom output directory"
    echo "  $0 -d -n sample.exe                  # Full analysis with network monitoring"
    echo ""
    echo "Safety levels:"
    echo "  Static only (default)  - Safe, no execution"
    echo "  With -d flag          - Executes sample (use isolation!)"
    echo "  With -n flag          - Monitors network (requires root)"
}

# Parse arguments
while getopts "o:dnvh" opt; do
    case $opt in
        o)
            OUTPUT_DIR="$OPTARG"
            ;;
        d)
            SKIP_DYNAMIC=false
            ;;
        n)
            NETWORK_MONITOR=true
            ;;
        v)
            VERBOSE=true
            ;;
        h)
            show_usage
            exit 0
            ;;
        \?)
            print_error "Invalid option: -$OPTARG"
            show_usage
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))
SAMPLE="$1"

# Validate input
if [ -z "$SAMPLE" ]; then
    print_error "No sample file specified!"
    show_usage
    exit 1
fi

if [ ! -f "$SAMPLE" ]; then
    print_error "File not found: $SAMPLE"
    exit 1
fi

# Set default output directory
if [ -z "$OUTPUT_DIR" ]; then
    OUTPUT_DIR="$HOME/malware-analysis/reports"
fi

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Generate report filename
BASENAME=$(basename "$SAMPLE")
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
REPORT_BASE="$OUTPUT_DIR/analysis_${BASENAME}_${TIMESTAMP}"

print_msg "Starting Malware Analysis"
echo "=========================="
print_info "Sample: $SAMPLE"
print_info "Output: $REPORT_BASE"
echo ""

# Safety check
if [ "$SKIP_DYNAMIC" = false ]; then
    print_warning "Dynamic analysis is ENABLED - sample will be executed!"
    print_warning "Ensure you are in an isolated environment!"
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_msg "Analysis cancelled"
        exit 0
    fi
fi

# Check network isolation
if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    print_warning "Network is accessible!"
    if [ "$SKIP_DYNAMIC" = false ]; then
        print_error "Dynamic analysis requires network isolation for safety"
        print_info "Use: docker exec with network disabled"
        exit 1
    fi
else
    print_msg "âœ“ Network appears isolated"
fi

# ============================================================================
# STATIC ANALYSIS
# ============================================================================

print_msg "Phase 1: Static Analysis"
STATIC_REPORT="${REPORT_BASE}_static.txt"

{
    echo "==================================="
    echo "STATIC ANALYSIS REPORT"
    echo "==================================="
    echo "Sample: $SAMPLE"
    echo "Date: $(date)"
    echo "Analyst: $(whoami)"
    echo ""
    
    # File information
    echo "[File Information]"
    echo "Type: $(file -b "$SAMPLE")"
    echo "Size: $(stat -c%s "$SAMPLE") bytes"
    echo "Permissions: $(stat -c%a "$SAMPLE")"
    echo ""
    
    # Hashes
    echo "[Cryptographic Hashes]"
    echo "MD5:    $(md5sum "$SAMPLE" | cut -d' ' -f1)"
    echo "SHA1:   $(sha1sum "$SAMPLE" | cut -d' ' -f1)"
    echo "SHA256: $(sha256sum "$SAMPLE" | cut -d' ' -f1)"
    echo "SSDEEP: $(ssdeep "$SAMPLE" 2>/dev/null | tail -1 || echo "ssdeep not available")"
    echo ""
    
    # Strings analysis
    echo "[Strings Analysis]"
    echo "Total strings: $(strings -a "$SAMPLE" | wc -l)"
    echo ""
    echo "URLs found:"
    strings -a "$SAMPLE" | grep -E "https?://" | head -10
    echo ""
    echo "IP addresses found:"
    strings -a "$SAMPLE" | grep -E "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" | head -10
    echo ""
    echo "Suspicious strings:"
    strings -a "$SAMPLE" | grep -iE "(cmd|powershell|exec|system|shell|passwd|shadow|registry)" | head -20
    echo ""
    
    # Binary analysis based on file type
    filetype=$(file -b "$SAMPLE" | cut -d',' -f1)
    
    if [[ "$filetype" == *"PE"* ]]; then
        echo "[PE Analysis]"
        if command -v pedump >/dev/null 2>&1; then
            pedump "$SAMPLE" 2>/dev/null | head -100
        elif command -v peinfo >/dev/null 2>&1; then
            peinfo "$SAMPLE" 2>/dev/null
        else
            echo "PE analysis tools not available"
        fi
    elif [[ "$filetype" == *"ELF"* ]]; then
        echo "[ELF Analysis]"
        readelf -h "$SAMPLE" 2>/dev/null
        echo ""
        echo "Program Headers:"
        readelf -l "$SAMPLE" 2>/dev/null | head -20
        echo ""
        echo "Section Headers:"
        readelf -S "$SAMPLE" 2>/dev/null | head -20
        echo ""
        echo "Symbols:"
        readelf -s "$SAMPLE" 2>/dev/null | head -20
    elif [[ "$filetype" == *"PDF"* ]]; then
        echo "[PDF Analysis]"
        if command -v pdfid >/dev/null 2>&1; then
            pdfid "$SAMPLE" 2>/dev/null
        else
            echo "PDF analysis tools not available"
        fi
    elif [[ "$filetype" == *"Microsoft"* ]]; then
        echo "[Office Document Analysis]"
        if command -v olevba >/dev/null 2>&1; then
            olevba "$SAMPLE" 2>/dev/null | head -100
        else
            echo "Office analysis tools not available"
        fi
    fi
    echo ""
    
    # YARA scanning
    echo "[YARA Detection]"
    if command -v yara >/dev/null 2>&1; then
        if [ -f "$HOME/malware-analysis/yara/combined_rules.yar" ]; then
            yara "$HOME/malware-analysis/yara/combined_rules.yar" "$SAMPLE" 2>/dev/null || echo "No YARA matches"
        else
            echo "YARA rules not configured"
        fi
    else
        echo "YARA not installed"
    fi
    echo ""
    
    # Entropy analysis
    echo "[Entropy Analysis]"
    if command -v ent >/dev/null 2>&1; then
        ent "$SAMPLE" 2>/dev/null
    else
        echo "Entropy: $(python3 -c "
import math
with open('$SAMPLE', 'rb') as f:
    data = f.read()
    entropy = 0
    for i in range(256):
        count = data.count(bytes([i]))
        if count > 0:
            freq = count / len(data)
            entropy -= freq * math.log2(freq)
    print(f'{entropy:.4f} bits per byte')
" 2>/dev/null || echo "Unable to calculate")"
    fi
    
} | tee "$STATIC_REPORT"

print_msg "Static analysis complete: $STATIC_REPORT"
echo ""

# ============================================================================
# DYNAMIC ANALYSIS (if enabled)
# ============================================================================

if [ "$SKIP_DYNAMIC" = false ]; then
    print_msg "Phase 2: Dynamic Analysis"
    print_warning "Preparing controlled execution environment..."
    
    DYNAMIC_REPORT="${REPORT_BASE}_dynamic.txt"
    SANDBOX_DIR="$OUTPUT_DIR/sandbox_${TIMESTAMP}"
    mkdir -p "$SANDBOX_DIR"
    
    # Start network monitoring if requested
    if [ "$NETWORK_MONITOR" = true ]; then
        print_info "Starting network capture..."
        tcpdump -i any -w "$SANDBOX_DIR/network.pcap" &
        TCPDUMP_PID=$!
        sleep 2
    fi
    
    # Monitor file system
    print_info "Creating file system baseline..."
    find /tmp /var/tmp -type f 2>/dev/null | sort > "$SANDBOX_DIR/files_before.txt"
    ps aux > "$SANDBOX_DIR/processes_before.txt"
    
    {
        echo "==================================="
        echo "DYNAMIC ANALYSIS REPORT"
        echo "==================================="
        echo "Sample: $SAMPLE"
        echo "Date: $(date)"
        echo "Execution Time: 30 seconds (timeout)"
        echo ""
        
        echo "[System Call Trace]"
        # Execute with strace (timeout after 30 seconds)
        timeout 30 strace -f -e trace=open,openat,socket,connect,execve \
            -o "$SANDBOX_DIR/strace.log" "$SAMPLE" 2>&1 || true
        
        # Analyze strace output
        echo "Files accessed:"
        grep -E "open|openat" "$SANDBOX_DIR/strace.log" 2>/dev/null | \
            grep -v ENOENT | head -20 || echo "No file access detected"
        echo ""
        
        echo "Network connections:"
        grep -E "socket|connect" "$SANDBOX_DIR/strace.log" 2>/dev/null | \
            head -10 || echo "No network activity detected"
        echo ""
        
        echo "Process creation:"
        grep "execve" "$SANDBOX_DIR/strace.log" 2>/dev/null | \
            head -10 || echo "No process creation detected"
        echo ""
        
    } | tee "$DYNAMIC_REPORT"
    
    # Check file system changes
    print_info "Analyzing file system changes..."
    find /tmp /var/tmp -type f 2>/dev/null | sort > "$SANDBOX_DIR/files_after.txt"
    
    {
        echo "[File System Changes]"
        echo "New files created:"
        comm -13 "$SANDBOX_DIR/files_before.txt" "$SANDBOX_DIR/files_after.txt" | head -20
        echo ""
        
        echo "[Process Changes]"
        ps aux > "$SANDBOX_DIR/processes_after.txt"
        echo "New processes:"
        comm -13 <(awk '{print $11}' "$SANDBOX_DIR/processes_before.txt" | sort) \
                 <(awk '{print $11}' "$SANDBOX_DIR/processes_after.txt" | sort) | head -10
        echo ""
        
    } | tee -a "$DYNAMIC_REPORT"
    
    # Stop network monitoring
    if [ "$NETWORK_MONITOR" = true ] && [ ! -z "$TCPDUMP_PID" ]; then
        kill $TCPDUMP_PID 2>/dev/null
        print_info "Network capture saved: $SANDBOX_DIR/network.pcap"
        
        # Basic network analysis
        {
            echo "[Network Analysis]"
            tcpdump -r "$SANDBOX_DIR/network.pcap" -nn 2>/dev/null | head -20
        } | tee -a "$DYNAMIC_REPORT"
    fi
    
    print_msg "Dynamic analysis complete: $DYNAMIC_REPORT"
fi

# ============================================================================
# GENERATE SUMMARY REPORT
# ============================================================================

print_msg "Generating summary report..."
SUMMARY_REPORT="${REPORT_BASE}_summary.md"

{
    echo "# Malware Analysis Summary"
    echo ""
    echo "## Sample Information"
    echo "- **File:** $BASENAME"
    echo "- **MD5:** $(md5sum "$SAMPLE" | cut -d' ' -f1)"
    echo "- **SHA256:** $(sha256sum "$SAMPLE" | cut -d' ' -f1)"
    echo "- **Type:** $(file -b "$SAMPLE" | cut -d',' -f1)"
    echo "- **Size:** $(stat -c%s "$SAMPLE") bytes"
    echo "- **Analysis Date:** $(date)"
    echo ""
    
    echo "## Key Findings"
    echo ""
    echo "### Static Analysis"
    echo "- Strings found: $(strings -a "$SAMPLE" | wc -l)"
    echo "- URLs detected: $(strings -a "$SAMPLE" | grep -E "https?://" | wc -l)"
    echo "- Suspicious strings: $(strings -a "$SAMPLE" | grep -iE "(cmd|powershell|exec|system)" | wc -l)"
    echo ""
    
    if [ "$SKIP_DYNAMIC" = false ]; then
        echo "### Dynamic Analysis"
        echo "- Execution status: Completed (30s timeout)"
        if [ -f "$SANDBOX_DIR/strace.log" ]; then
            echo "- System calls logged: $(wc -l < "$SANDBOX_DIR/strace.log")"
        fi
        if [ "$NETWORK_MONITOR" = true ] && [ -f "$SANDBOX_DIR/network.pcap" ]; then
            echo "- Network packets captured: $(tcpdump -r "$SANDBOX_DIR/network.pcap" 2>/dev/null | wc -l)"
        fi
        echo ""
    fi
    
    echo "## Reports Generated"
    echo "- Static Analysis: $STATIC_REPORT"
    if [ "$SKIP_DYNAMIC" = false ]; then
        echo "- Dynamic Analysis: $DYNAMIC_REPORT"
    fi
    echo "- Summary: $SUMMARY_REPORT"
    echo ""
    
    echo "## Recommendations"
    echo "1. Review static analysis for indicators of compromise"
    echo "2. Check YARA matches for known malware families"
    echo "3. Analyze strings for C2 servers or suspicious URLs"
    if [ "$SKIP_DYNAMIC" = false ]; then
        echo "4. Review dynamic behavior for persistence mechanisms"
        echo "5. Check network traffic for malicious communications"
    fi
    
} | tee "$SUMMARY_REPORT"

# ============================================================================
# FINAL SUMMARY
# ============================================================================

echo ""
echo "======================================"
print_msg "Analysis Complete!"
echo "======================================"
echo ""
print_msg "Reports saved to: $OUTPUT_DIR"
echo ""
echo "Files generated:"
echo "  â€¢ Static Report:  $(basename "$STATIC_REPORT")"
if [ "$SKIP_DYNAMIC" = false ]; then
    echo "  â€¢ Dynamic Report: $(basename "$DYNAMIC_REPORT")"
    if [ -d "$SANDBOX_DIR" ]; then
        echo "  â€¢ Sandbox Data:   $(basename "$SANDBOX_DIR")/"
    fi
fi
echo "  â€¢ Summary:        $(basename "$SUMMARY_REPORT")"
echo ""

if [ "$VERBOSE" = true ]; then
    print_info "Quick review commands:"
    echo "  cat $SUMMARY_REPORT"
    echo "  less $STATIC_REPORT"
    if [ "$SKIP_DYNAMIC" = false ]; then
        echo "  less $DYNAMIC_REPORT"
    fi
fi