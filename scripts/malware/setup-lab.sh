#!/bin/bash

# Malware Analysis Lab Setup Script
# Creates isolated environment for safe malware analysis

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored messages
print_msg() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_error() {
    echo -e "${RED}[!]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[*]${NC} $1"
}

print_msg "Setting Up Malware Analysis Lab"
echo "================================"

# Check if running in container
if [ ! -f /.dockerenv ]; then
    print_warning "This script should be run inside the Docker container"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Check network isolation
print_msg "Checking network configuration..."
if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    print_warning "Network is accessible. For isolated analysis, use:"
    echo "  ./scripts/core/start.sh --isolated"
    echo ""
    read -p "Continue with network access? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_msg "Exiting. Please restart with --isolated flag for safety."
        exit 1
    fi
else
    print_msg "âœ“ Network is isolated (recommended for malware analysis)"
fi

# Create directory structure
print_msg "Creating analysis workspace..."
mkdir -p ~/malware-analysis/{samples,reports,tools,scripts,yara,sandbox,quarantine}
mkdir -p ~/malware-analysis/samples/{windows,linux,documents,mobile,unknown}
mkdir -p ~/malware-analysis/reports/{static,dynamic,network,memory}
mkdir -p ~/malware-analysis/tools/{static,dynamic,network}
mkdir -p ~/malware-analysis/sandbox/{input,output,logs}
mkdir -p ~/malware-analysis/quarantine

# Install analysis tools if not present
print_msg "Checking required tools..."
if ! command -v yara >/dev/null 2>&1; then
    print_msg "Installing malware analysis tools..."
    /home/kali/scripts/tools/install-malware.sh
fi

# Download YARA rules
print_msg "Setting up YARA rules..."
cd ~/malware-analysis/yara

# Download rule collections
if [ ! -d "rules" ]; then
    print_msg "Downloading YARA rule collections..."
    git clone https://github.com/Yara-Rules/rules.git 2>/dev/null || print_warning "Failed to clone Yara-Rules"
fi

if [ ! -d "signature-base" ]; then
    git clone https://github.com/Neo23x0/signature-base.git 2>/dev/null || print_warning "Failed to clone signature-base"
fi

# Create combined YARA rules file
print_msg "Creating combined YARA rules..."
cat > ~/malware-analysis/yara/combined_rules.yar << 'EOF'
// Combined YARA Rules for Malware Analysis
// Auto-generated by setup-lab.sh

EOF

# Include available rule files
if [ -d "rules" ]; then
    find rules -name "*.yar" -o -name "*.yara" | while read rule; do
        echo "include \"$rule\"" >> combined_rules.yar
    done
fi

# Create analysis scripts
print_msg "Creating analysis automation scripts..."

# Static analysis script
cat > ~/malware-analysis/scripts/static-analysis.sh << 'EOF'
#!/bin/bash
# Automated static analysis script

SAMPLE="$1"
if [ -z "$SAMPLE" ]; then
    echo "Usage: $0 <sample_file>"
    exit 1
fi

BASENAME=$(basename "$SAMPLE")
REPORT_DIR="$HOME/malware-analysis/reports/static"
REPORT="$REPORT_DIR/report_${BASENAME}_$(date +%Y%m%d_%H%M%S).txt"

mkdir -p "$REPORT_DIR"

echo "=== Static Analysis Report ===" | tee "$REPORT"
echo "Sample: $SAMPLE" | tee -a "$REPORT"
echo "Date: $(date)" | tee -a "$REPORT"
echo "" | tee -a "$REPORT"

# File information
echo "=== File Information ===" | tee -a "$REPORT"
file "$SAMPLE" | tee -a "$REPORT"
echo "" | tee -a "$REPORT"

# Hashes
echo "=== Cryptographic Hashes ===" | tee -a "$REPORT"
echo "MD5:    $(md5sum "$SAMPLE" | cut -d' ' -f1)" | tee -a "$REPORT"
echo "SHA1:   $(sha1sum "$SAMPLE" | cut -d' ' -f1)" | tee -a "$REPORT"
echo "SHA256: $(sha256sum "$SAMPLE" | cut -d' ' -f1)" | tee -a "$REPORT"
echo "Size:   $(stat -c%s "$SAMPLE") bytes" | tee -a "$REPORT"
echo "" | tee -a "$REPORT"

# Strings analysis
echo "=== Interesting Strings ===" | tee -a "$REPORT"
strings -a "$SAMPLE" | grep -E "(http|https|ftp|cmd|powershell|exec|system|shell)" | head -50 | tee -a "$REPORT"
echo "" | tee -a "$REPORT"

# YARA scan
if command -v yara >/dev/null; then
    echo "=== YARA Matches ===" | tee -a "$REPORT"
    yara -s ~/malware-analysis/yara/combined_rules.yar "$SAMPLE" 2>/dev/null | tee -a "$REPORT" || echo "No YARA matches found" | tee -a "$REPORT"
    echo "" | tee -a "$REPORT"
fi

# PE/ELF analysis
filetype=$(file -b "$SAMPLE" | cut -d',' -f1)
if [[ "$filetype" == *"PE"* ]]; then
    echo "=== PE Analysis ===" | tee -a "$REPORT"
    if command -v pescan >/dev/null; then
        pescan "$SAMPLE" | tee -a "$REPORT"
    fi
elif [[ "$filetype" == *"ELF"* ]]; then
    echo "=== ELF Analysis ===" | tee -a "$REPORT"
    readelf -a "$SAMPLE" | head -100 | tee -a "$REPORT"
fi

echo "" | tee -a "$REPORT"
echo "Report saved to: $REPORT"
EOF

# Dynamic analysis script
cat > ~/malware-analysis/scripts/dynamic-analysis.sh << 'EOF'
#!/bin/bash
# Automated dynamic analysis script (USE WITH CAUTION)

SAMPLE="$1"
if [ -z "$SAMPLE" ]; then
    echo "Usage: $0 <sample_file>"
    echo "WARNING: This will execute the sample in a monitored environment!"
    exit 1
fi

echo "WARNING: Dynamic analysis can be dangerous!"
echo "Ensure you are in an isolated environment."
read -p "Continue? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
fi

BASENAME=$(basename "$SAMPLE")
REPORT_DIR="$HOME/malware-analysis/reports/dynamic"
SANDBOX_DIR="$HOME/malware-analysis/sandbox"
REPORT="$REPORT_DIR/report_${BASENAME}_$(date +%Y%m%d_%H%M%S).txt"

mkdir -p "$REPORT_DIR" "$SANDBOX_DIR/output"

echo "=== Dynamic Analysis Report ===" | tee "$REPORT"
echo "Sample: $SAMPLE" | tee -a "$REPORT"
echo "Date: $(date)" | tee -a "$REPORT"
echo "" | tee -a "$REPORT"

# Copy sample to sandbox
cp "$SAMPLE" "$SANDBOX_DIR/input/"

# Start monitoring
echo "Starting system monitoring..." | tee -a "$REPORT"

# Network monitoring (background)
tcpdump -i any -w "$SANDBOX_DIR/output/network_${BASENAME}.pcap" &
TCPDUMP_PID=$!

# File system monitoring
echo "=== File System Changes ===" | tee -a "$REPORT"
# Take snapshot before
find /tmp /var/tmp -type f 2>/dev/null | sort > /tmp/files_before.txt

# Process monitoring
echo "=== Process Activity ===" | tee -a "$REPORT"
# Run sample with strace
timeout 30 strace -f -o "$SANDBOX_DIR/output/strace_${BASENAME}.log" "$SAMPLE" 2>&1 | tee -a "$REPORT"

# Take snapshot after
find /tmp /var/tmp -type f 2>/dev/null | sort > /tmp/files_after.txt

# Compare file system
echo "=== New Files Created ===" | tee -a "$REPORT"
comm -13 /tmp/files_before.txt /tmp/files_after.txt | tee -a "$REPORT"

# Stop network monitoring
kill $TCPDUMP_PID 2>/dev/null

# Analyze network capture
echo "=== Network Activity ===" | tee -a "$REPORT"
tcpdump -r "$SANDBOX_DIR/output/network_${BASENAME}.pcap" -nn 2>/dev/null | head -50 | tee -a "$REPORT"

echo "" | tee -a "$REPORT"
echo "Report saved to: $REPORT"
echo "Network capture: $SANDBOX_DIR/output/network_${BASENAME}.pcap"
echo "Strace log: $SANDBOX_DIR/output/strace_${BASENAME}.log"
EOF

# Safe execution wrapper
cat > ~/malware-analysis/scripts/safe-exec.sh << 'EOF'
#!/bin/bash
# Safe execution wrapper using firejail

SAMPLE="$1"
if [ -z "$SAMPLE" ]; then
    echo "Usage: $0 <sample_file>"
    exit 1
fi

if ! command -v firejail >/dev/null; then
    echo "Error: firejail not installed"
    echo "Install with: apt-get install firejail"
    exit 1
fi

echo "Executing sample in sandbox..."
firejail --net=none --private --noroot --nosound --no3d \
    --blacklist=/home --blacklist=/root \
    --timeout=00:01:00 \
    "$SAMPLE"
EOF

# Make scripts executable
chmod +x ~/malware-analysis/scripts/*.sh

# Create analysis functions in shell
print_msg "Adding analysis functions to shell..."
cat >> ~/.zshrc << 'EOF'

# Malware Analysis Functions
mal-static() {
    ~/malware-analysis/scripts/static-analysis.sh "$@"
}

mal-dynamic() {
    ~/malware-analysis/scripts/dynamic-analysis.sh "$@"
}

mal-safe() {
    ~/malware-analysis/scripts/safe-exec.sh "$@"
}

mal-yara() {
    yara -r ~/malware-analysis/yara/combined_rules.yar "$@"
}

mal-strings() {
    strings -a "$1" | less
}

mal-hex() {
    hexdump -C "$1" | less
}

# Quick malware hash check
mal-hash() {
    echo "MD5:    $(md5sum "$1" | cut -d' ' -f1)"
    echo "SHA1:   $(sha1sum "$1" | cut -d' ' -f1)"
    echo "SHA256: $(sha256sum "$1" | cut -d' ' -f1)"
}

# List analysis reports
mal-reports() {
    ls -la ~/malware-analysis/reports/*/
}
EOF

# Create README
cat > ~/malware-analysis/README.md << 'EOF'
# Malware Analysis Lab

## Directory Structure
- `samples/` - Malware samples (organized by type)
- `reports/` - Analysis reports (static/dynamic/network/memory)
- `tools/` - Analysis tools and utilities
- `scripts/` - Automation scripts
- `yara/` - YARA rules for detection
- `sandbox/` - Sandbox environment for execution
- `quarantine/` - Isolated storage for dangerous samples

## Quick Start Commands

### Static Analysis
```bash
mal-static <sample>           # Automated static analysis
mal-yara <sample>             # YARA rule scanning
mal-strings <sample>          # Extract strings
mal-hex <sample>              # Hex dump
mal-hash <sample>             # Calculate hashes
```

### Dynamic Analysis (DANGEROUS)
```bash
mal-dynamic <sample>          # Automated dynamic analysis
mal-safe <sample>             # Execute in firejail sandbox
```

### Reports
```bash
mal-reports                   # List all analysis reports
```

## Safety Guidelines
1. ALWAYS work in isolated environment
2. NEVER execute malware on production systems
3. Use network isolation when possible
4. Take snapshots before analysis
5. Use sandbox for execution

## Analysis Workflow
1. Static analysis first (safe)
2. Network isolation check
3. Snapshot system
4. Dynamic analysis (if needed)
5. Generate report
6. Restore from snapshot
EOF

# Set proper permissions
chown -R kali:kali ~/malware-analysis

# Final setup summary
echo ""
echo "======================================"
print_msg "Malware Analysis Lab Setup Complete!"
echo "======================================"
echo ""
print_msg "Workspace created at: ~/malware-analysis/"
echo ""
print_msg "Quick commands available:"
echo "  mal-static <file>  - Static analysis"
echo "  mal-yara <file>    - YARA scanning"
echo "  mal-hash <file>    - Calculate hashes"
echo "  mal-strings <file> - Extract strings"
echo "  mal-hex <file>     - Hex dump"
echo ""
print_warning "Dynamic analysis commands (USE WITH CAUTION):"
echo "  mal-dynamic <file> - Full dynamic analysis"
echo "  mal-safe <file>    - Sandboxed execution"
echo ""
print_msg "See ~/malware-analysis/README.md for full documentation"
echo ""
print_warning "Remember: Always analyze malware in isolation!"