#!/bin/bash
# Launch Kali malware analysis desktop with specialized tools

echo "Starting Kali's Malware Analysis Desktop Environment"
echo "==================================================="

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Check if we're in the right directory
if [ ! -f "$PROJECT_ROOT/docker-compose.yml" ]; then
    echo "Error: docker-compose.yml not found in $PROJECT_ROOT"
    echo "Please run this script from the Kalis-Kali project directory"
    exit 1
fi

# Function to cleanup and restart containers
restart_containers() {
    echo "Restarting containers to ensure clean state..."
    
    # Change to project root
    cd "$PROJECT_ROOT"
    
    # Stop all related containers
    echo "Stopping existing containers..."
    docker-compose down
    
    # Force remove the container if it still exists
    if docker ps -a | grep -q kali-workspace; then
        echo "Force removing kali-workspace container..."
        docker rm -f kali-workspace 2>/dev/null || true
    fi
    
    # Also stop any containers using the kali image
    echo "Stopping any other Kali containers..."
    docker ps -a | grep kali | awk '{print $1}' | xargs -r docker rm -f 2>/dev/null || true
    
    # Clean up ONLY malware-related menu configurations from volumes
    echo "Cleaning up malware menu configurations..."
    # Only remove menu files, not panel configuration
    rm -rf ./config/menus 2>/dev/null || true
    # Don't remove whiskermenu config or panel config - those have our styling!
    
    # Remove XQuartz/X11 lock files that might cause issues
    rm -f /tmp/.X*-lock 2>/dev/null || true
    
    # Start containers fresh
    echo "Starting fresh containers..."
    docker-compose up -d kali
    
    # Wait for container to be ready
    echo "Waiting for container to be ready..."
    sleep 8
    
    # Verify container is running
    if ! docker ps | grep -q kali-workspace; then
        echo "Error: Failed to start kali-workspace container"
        echo "Checking container status..."
        docker ps -a | grep kali
        exit 1
    fi
    
    echo "Container restarted successfully!"
}

# Check for command line arguments
FORCE_RESTART=false
if [ "$1" == "--restart" ] || [ "$1" == "-r" ]; then
    FORCE_RESTART=true
fi

# Handle container restart
if [ "$FORCE_RESTART" == "true" ]; then
    echo "Force restart requested."
    restart_containers
else
    # Ask user if they want to restart containers
    echo "To ensure a clean environment, it's recommended to restart the containers."
    read -p "Do you want to restart the containers? (y/N) " -n 1 -r
    echo ""

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        restart_containers
    else
        # Just check if container is running
        if ! docker ps | grep -q kali-workspace; then
            echo "Error: kali-workspace container is not running"
            echo "Start it with: docker-compose up -d kali"
            exit 1
        fi
        echo "Warning: Using existing container. Old menu entries may persist."
        echo "Run './scripts/kali-malware-analysis.sh --restart' for a clean environment."
    fi
fi

# Check XQuartz
if ! pgrep -x "XQuartz" > /dev/null; then
    echo "Starting XQuartz..."
    open -a XQuartz
    sleep 3
fi

# Configure XQuartz
echo "Configuring XQuartz..."
defaults write org.xquartz.X11 nolisten_tcp -bool false
defaults write org.xquartz.X11 no_auth -bool false
defaults write org.xquartz.X11 enable_iglx -bool true

# Set xhost permissions
export DISPLAY=:0
xhost + > /dev/null 2>&1

# Check if socat is running
if ! pgrep -f "socat.*6000" > /dev/null; then
    echo "Starting X11 bridge..."
    nohup socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:"/tmp/.X11-unix/X0" > /tmp/socat-x11.log 2>&1 &
    SOCAT_PID=$!
    echo "Socat bridge started (PID: $SOCAT_PID)"
    sleep 1
fi

# Install required packages for desktop and malware analysis tools
echo "Installing desktop components and malware analysis tools..."
docker exec kali-workspace sh -c "
apt-get update > /dev/null 2>&1
apt-get install -y --no-install-recommends \
    xfce4-session \
    xfce4-panel \
    xfce4-terminal \
    xfdesktop4 \
    xfwm4 \
    xfce4-settings \
    xfce4-appfinder \
    xfce4-whiskermenu-plugin \
    dbus-x11 \
    x11-xserver-utils \
    kali-menu \
    xdg-utils \
    desktop-file-utils \
    ghidra \
    radare2 \
    cutter \
    gdb \
    edb-debugger \
    volatility3 \
    yara \
    binwalk \
    hexedit \
    xxd \
    strings \
    file \
    objdump \
    strace \
    ltrace \
    upx-ucl \
    wine \
    wine32 \
    wine64 \
    wireshark \
    tcpdump \
    python3-pefile \
    python3-pyelftools \
    python3-capstone \
    python3-unicorn \
    python3-distorm3 > /dev/null 2>&1
"

# Create desktop entries for malware analysis tools
echo "Creating malware analysis desktop entries..."
docker exec kali-workspace bash << 'EOSCRIPT'
# First, clean up any existing malware entries to ensure fresh start
echo "Cleaning up any existing malware menu entries..."
rm -f /usr/share/applications/*malware*.desktop 2>/dev/null
rm -f /usr/local/share/applications/*malware*.desktop 2>/dev/null
rm -f /root/.local/share/applications/*malware*.desktop 2>/dev/null
rm -f /home/kali/.local/share/applications/*malware*.desktop 2>/dev/null
rm -f /usr/share/desktop-directories/*malware*.directory 2>/dev/null
rm -rf /etc/xdg/menus/applications-merged/*malware* 2>/dev/null
# Only remove custom menu files, not the entire directory which might have panel configs
rm -f /root/.config/menus/xfce-applications.menu 2>/dev/null
rm -f /home/kali/.config/menus/xfce-applications.menu 2>/dev/null

# Clear only menu caches, not all xfce4 caches
rm -rf /root/.cache/menus/* 2>/dev/null
rm -rf /home/kali/.cache/menus/* 2>/dev/null

# Now create fresh entries
mkdir -p /usr/share/applications
mkdir -p /usr/share/desktop-directories

# Create desktop entries that fit into existing Kali categories
# This avoids creating new categories that might duplicate

# Ghidra - put in reverse engineering category
cat > /usr/share/applications/kali-ghidra-malware.desktop <<EOF
[Desktop Entry]
Name=Ghidra (Malware Analysis)
Comment=NSA Reverse Engineering Tool
Exec=/usr/bin/ghidra
Icon=applications-development
Terminal=false
Type=Application
Categories=X-Kali-07-ReverseEngineering;
EOF

# Cutter - put in reverse engineering category
cat > /usr/share/applications/kali-cutter-malware.desktop <<EOF
[Desktop Entry]
Name=Cutter (Malware Analysis)
Comment=Radare2 GUI
Exec=/usr/bin/cutter
Icon=applications-debugging
Terminal=false
Type=Application
Categories=X-Kali-07-ReverseEngineering;
EOF

# EDB Debugger - put in reverse engineering category
cat > /usr/share/applications/kali-edb-malware.desktop <<EOF
[Desktop Entry]
Name=EDB Debugger (Malware Analysis)
Comment=Linux Debugger
Exec=/usr/bin/edb
Icon=applications-debugging
Terminal=false
Type=Application
Categories=X-Kali-07-ReverseEngineering;
EOF

# Volatility3 - put in forensics category
cat > /usr/share/applications/kali-volatility3-malware.desktop <<EOF
[Desktop Entry]
Name=Volatility3 (Malware Analysis)
Comment=Memory Forensics Framework
Exec=xfce4-terminal --hold -e volatility3
Icon=application-x-executable
Terminal=false
Type=Application
Categories=X-Kali-15-Forensics;
EOF

# YARA - put in forensics category
cat > /usr/share/applications/kali-yara-malware.desktop <<EOF
[Desktop Entry]
Name=YARA Terminal (Malware Analysis)
Comment=Pattern Matching Engine
Exec=xfce4-terminal --hold -e yara
Icon=utilities-terminal
Terminal=false
Type=Application
Categories=X-Kali-15-Forensics;
EOF

# Binwalk - put in reverse engineering category
cat > /usr/share/applications/kali-binwalk-malware.desktop <<EOF
[Desktop Entry]
Name=Binwalk (Malware Analysis)
Comment=Firmware Analysis Tool
Exec=xfce4-terminal --hold -e binwalk
Icon=system-search
Terminal=false
Type=Application
Categories=X-Kali-07-ReverseEngineering;
EOF

# Hex Editor - put in reverse engineering category
cat > /usr/share/applications/kali-hexedit-malware.desktop <<EOF
[Desktop Entry]
Name=Hex Editor (Malware Analysis)
Comment=Hexadecimal Editor
Exec=xfce4-terminal -e hexedit
Icon=accessories-text-editor
Terminal=false
Type=Application
Categories=X-Kali-07-ReverseEngineering;
EOF

# Wireshark - put in sniffing category
cat > /usr/share/applications/kali-wireshark-malware.desktop <<EOF
[Desktop Entry]
Name=Wireshark (Malware Analysis)
Comment=Network Protocol Analyzer
Exec=/usr/bin/wireshark
Icon=wireshark
Terminal=false
Type=Application
Categories=X-Kali-04-SniffingSpoofing;
EOF

# PE Analysis Terminal - put in reverse engineering category
cat > /usr/share/applications/kali-pe-analysis-malware.desktop <<EOF
[Desktop Entry]
Name=PE Analysis Terminal
Comment=Windows PE File Analysis
Exec=xfce4-terminal --hold
Icon=application-x-ms-dos-executable
Terminal=false
Type=Application
Categories=X-Kali-07-ReverseEngineering;
EOF

# Update desktop database
update-desktop-database /usr/share/applications
update-mime-database /usr/share/mime 2>/dev/null || true

# Set proper permissions
chmod 644 /usr/share/applications/kali-*-malware.desktop

# Clear all menu caches to ensure fresh load
rm -rf /root/.cache/menus/* 2>/dev/null || true
rm -rf /root/.cache/xfce4/* 2>/dev/null || true
rm -rf /home/kali/.cache/menus/* 2>/dev/null || true
rm -rf /home/kali/.cache/xfce4/* 2>/dev/null || true
EOSCRIPT

# Fix application menu entries
echo "Setting up Kali malware analysis menus..."
docker exec kali-workspace sh -c "
update-desktop-database /usr/share/applications 2>/dev/null || true
update-mime-database /usr/share/mime 2>/dev/null || true
gtk-update-icon-cache -f /usr/share/icons/hicolor 2>/dev/null || true
rm -rf /home/kali/.cache/menus/* 2>/dev/null || true
rm -rf /home/kali/.config/menus/* 2>/dev/null || true
mkdir -p /home/kali/.local/share/applications
mkdir -p /home/kali/.config/menus
chown -R kali:kali /home/kali/.cache /home/kali/.config /home/kali/.local 2>/dev/null || true
"

# Kill any existing desktop processes
echo "Cleaning up any existing desktop sessions..."
docker exec kali-workspace sh -c "
pkill -f xfce4-session 2>/dev/null || true
pkill -f xfwm4 2>/dev/null || true
pkill -f xfdesktop 2>/dev/null || true
pkill -f xfce4-panel 2>/dev/null || true
sleep 2
"

echo ""
echo "Launching Malware Analysis Desktop..."
echo "==================================="
echo ""

# Start D-Bus
echo "Starting D-Bus service..."
docker exec kali-workspace sh -c "service dbus start 2>/dev/null || true"

# Set up proper environment
docker exec kali-workspace sh -c "
export DISPLAY=host.docker.internal:0
export DBUS_SESSION_BUS_ADDRESS=\$(dbus-launch --autolaunch=\$(cat /var/lib/dbus/machine-id) --binary-syntax --close-stderr)
export XDG_RUNTIME_DIR=/tmp/runtime-root
mkdir -p \$XDG_RUNTIME_DIR
chmod 0700 \$XDG_RUNTIME_DIR
"

# Start window manager first
echo "Starting window manager..."
docker exec -d kali-workspace sh -c "DISPLAY=host.docker.internal:0 xfwm4 --compositor=off --sm-client-disable"
sleep 2

# Launch desktop components
echo "Starting desktop background..."
docker exec -d kali-workspace sh -c "DISPLAY=host.docker.internal:0 xfdesktop --sm-client-disable"

echo "Configuring malware analysis panel..."
# Configure vertical panel with malware tools
docker exec kali-workspace bash << 'EOPANEL'
    # Kill any existing panel
    pkill xfce4-panel 2>/dev/null
    sleep 1
    
    # Create malware analysis panel configuration
    mkdir -p /root/.config/xfce4/xfconf/xfce-perchannel-xml
    
    cat > /root/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xfce4-panel" version="1.0">
  <property name="configver" type="int" value="2"/>
  <property name="panels" type="array">
    <value type="int" value="1"/>
    <property name="panel-1" type="empty">
      <property name="position" type="string" value="p=11;x=0;y=0"/>
      <property name="position-locked" type="bool" value="true"/>
      <property name="size" type="uint" value="56"/>
      <property name="length" type="uint" value="100"/>
      <property name="plugin-ids" type="array">
        <value type="int" value="1"/>
        <value type="int" value="2"/>
        <value type="int" value="3"/>
        <value type="int" value="4"/>
        <value type="int" value="5"/>
        <value type="int" value="6"/>
        <value type="int" value="7"/>
        <value type="int" value="8"/>
        <value type="int" value="9"/>
        <value type="int" value="10"/>
        <value type="int" value="11"/>
      </property>
      <property name="mode" type="uint" value="1"/>
      <property name="autohide-behavior" type="uint" value="0"/>
      <property name="background-style" type="uint" value="1"/>
      <property name="background-alpha" type="uint" value="90"/>
    </property>
  </property>
  <property name="plugins" type="empty">
    <property name="plugin-1" type="string" value="whiskermenu">
      <property name="button-icon" type="string" value="kali-menu"/>
      <property name="show-button-title" type="bool" value="false"/>
    </property>
    <property name="plugin-2" type="string" value="separator">
      <property name="style" type="uint" value="1"/>
    </property>
    <property name="plugin-3" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="xfce4-terminal.desktop"/>
      </property>
    </property>
    <property name="plugin-4" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="kali-ghidra-malware.desktop"/>
      </property>
    </property>
    <property name="plugin-5" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="kali-cutter-malware.desktop"/>
      </property>
    </property>
    <property name="plugin-6" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="kali-edb-malware.desktop"/>
      </property>
    </property>
    <property name="plugin-7" type="string" value="launcher">
      <property name="items" type="array">
        <value type="string" value="thunar.desktop"/>
      </property>
    </property>
    <property name="plugin-8" type="string" value="separator">
      <property name="style" type="uint" value="1"/>
    </property>
    <property name="plugin-9" type="string" value="tasklist">
      <property name="show-labels" type="bool" value="false"/>
      <property name="show-handle" type="bool" value="false"/>
      <property name="flat-buttons" type="bool" value="true"/>
      <property name="sort-order" type="uint" value="4"/>
      <property name="grouping" type="uint" value="1"/>
    </property>
    <property name="plugin-10" type="string" value="separator">
      <property name="expand" type="bool" value="true"/>
      <property name="style" type="uint" value="0"/>
    </property>
    <property name="plugin-11" type="string" value="systray">
      <property name="square-icons" type="bool" value="true"/>
      <property name="show-frame" type="bool" value="false"/>
    </property>
  </property>
</channel>
EOF
    
    # Configure window manager to respect panel space
    cat > /root/.config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xfwm4" version="1.0">
  <property name="general" type="empty">
    <property name="margin_left" type="int" value="58"/>
    <property name="margin_right" type="int" value="0"/>
    <property name="margin_top" type="int" value="0"/>
    <property name="margin_bottom" type="int" value="0"/>
    <property name="snap_to_border" type="bool" value="true"/>
    <property name="snap_to_windows" type="bool" value="true"/>
    <property name="snap_width" type="int" value="10"/>
  </property>
</channel>
EOF
    
    # Clear cache
    rm -rf /root/.cache/sessions/xfce4-panel*
EOPANEL

echo "Starting malware analysis panel..."
docker exec -d kali-workspace sh -c "DISPLAY=host.docker.internal:0 xfce4-panel --sm-client-disable"

echo "Starting terminal with malware analysis welcome..."
docker exec -d kali-workspace sh -c 'DISPLAY=host.docker.internal:0 xfce4-terminal -e "bash -c \"echo \\\"═══════════════════════════════════════════════════════════════\\\"; echo \\\"         Welcome to Kali'"'"'s Malware Analysis Desktop\\\"; echo \\\"═══════════════════════════════════════════════════════════════\\\"; echo \\\"\\\"; echo \\\"Quick Commands:\\\"; echo \\\"  • ghidra          - NSA Reverse Engineering Suite\\\"; echo \\\"  • cutter          - Radare2 GUI\\\"; echo \\\"  • edb             - Linux Debugger\\\"; echo \\\"  • volatility3     - Memory Forensics\\\"; echo \\\"  • yara            - Pattern Matching\\\"; echo \\\"  • binwalk         - Firmware Analysis\\\"; echo \\\"  • hexedit         - Hex Editor\\\"; echo \\\"  • wireshark       - Network Analysis\\\"; echo \\\"\\\"; echo \\\"Analysis shortcuts:\\\"; echo \\\"  • file <sample>   - Identify file type\\\"; echo \\\"  • strings <sample> - Extract strings\\\"; echo \\\"  • objdump -x <pe> - PE headers\\\"; echo \\\"  • readelf -a <elf> - ELF analysis\\\"; echo \\\"\\\"; bash\""'

echo ""
echo "Malware Analysis Desktop Launched!"
echo "================================="
echo ""
echo "Desktop features:"
echo "• Vertical panel (64px wide) with malware analysis tools"
echo "• Malware tools integrated into existing Kali categories"
echo "• Quick launchers: Terminal, Ghidra, Cutter, EDB, Wireshark, Volatility3, Hex Editor"
echo "• Tools appear in: 07-reverse-engineering, 09-sniffing-spoofing, 11-forensics"
echo "• Clock and system tray included"
echo ""
echo "💡 Tips:"
echo "• Click Kali dragon → Navigate to relevant categories:"
echo "  - 07 - Reverse Engineering: Ghidra, Cutter, EDB, Binwalk, Hex Editor"
echo "  - 09 - Sniffing & Spoofing: Wireshark"
echo "  - 11 - Forensics: Volatility3, YARA"
echo "• Use quick launchers for frequently used tools"
echo "• Terminal opened with malware analysis command reference"
echo ""
echo "⚠️  SAFETY REMINDER:"
echo "• Always analyze malware in isolated environments"
echo "• Consider using --network none when analyzing samples"
echo "• Take VM snapshots before dynamic analysis"
echo ""
echo "To stop: Close all windows or press Ctrl+C here"

# Keep script running and monitor
while true; do
    if ! docker ps | grep -q kali-workspace; then
        echo "Container stopped"
        break
    fi
    sleep 5
done